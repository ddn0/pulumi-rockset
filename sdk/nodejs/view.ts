// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rockset from "@pulumi/rockset";
 *
 * const sample = new rockset.Workspace("sample", {description: "sample datasets"});
 * const _public = new rockset.S3Integration("public", {
 *     description: "Integration to access Rockset's public datasets",
 *     awsRoleArn: "arn:aws:iam::469279130686:role/rockset-public-datasets",
 * });
 * const cities = new rockset.S3Collection("cities", {
 *     workspace: sample.name,
 *     sources: [{
 *         bucket: "rockset-public-datasets",
 *         integrationName: _public.name,
 *         pattern: "cities/*.json",
 *         format: "json",
 *     }],
 * });
 * const brazil = new rockset.View("brazil", {
 *     query: "SELECT * FROM sample.cities c WHERE c.fields.country_code = 'BR'",
 *     workspace: sample.name,
 * }, {
 *     dependsOn: [cities],
 * });
 * ```
 */
export class View extends pulumi.CustomResource {
    /**
     * Get an existing View resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ViewState, opts?: pulumi.CustomResourceOptions): View {
        return new View(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rockset:index/view:View';

    /**
     * Returns true if the given object is an instance of View.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is View {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === View.__pulumiType;
    }

    /**
     * The user who created the view.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Text describing the collection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SQL query used for thw view.
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * Workspace name.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a View resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ViewArgs | ViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ViewState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as ViewArgs | undefined;
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(View.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering View resources.
 */
export interface ViewState {
    /**
     * The user who created the view.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Text describing the collection.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
     */
    name?: pulumi.Input<string>;
    /**
     * SQL query used for thw view.
     */
    query?: pulumi.Input<string>;
    /**
     * Workspace name.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a View resource.
 */
export interface ViewArgs {
    /**
     * Text describing the collection.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
     */
    name?: pulumi.Input<string>;
    /**
     * SQL query used for thw view.
     */
    query: pulumi.Input<string>;
    /**
     * Workspace name.
     */
    workspace: pulumi.Input<string>;
}
