// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a Rockset Virtual Instance. To be able to create a new Virtual Instance,
 * The main virtual instance must use a dedicated instance to create a secondary virtual instance,
 * which must be SMALL or larger. To enable live mount, the secondary virtual instance must be MEDIUM or larger.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rockset from "@pulumi/rockset";
 *
 * const query = new rockset.VirtualInstance("query", {
 *     description: "vi for executing query lambdas",
 *     size: "MEDIUM",
 *     remountOnResume: true,
 * });
 * const patch = new rockset.CollectionMount("patch", {
 *     virtualInstanceId: query.id,
 *     path: "commons.data",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import rockset:index/virtualInstance:VirtualInstance query 29e4a43c-fff4-4fe6-80e3-1ee57bc22e82
 * ```
 */
export class VirtualInstance extends pulumi.CustomResource {
    /**
     * Get an existing VirtualInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualInstanceState, opts?: pulumi.CustomResourceOptions): VirtualInstance {
        return new VirtualInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rockset:index/virtualInstance:VirtualInstance';

    /**
     * Returns true if the given object is an instance of VirtualInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualInstance.__pulumiType;
    }

    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    public readonly autoSuspendSeconds!: pulumi.Output<number | undefined>;
    /**
     * Current size of the virtual instance.
     */
    public /*out*/ readonly currentSize!: pulumi.Output<string>;
    /**
     * Is this Virtual Instance the default.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * Description of the virtual instance.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Desired size of the virtual instance.
     */
    public /*out*/ readonly desiredSize!: pulumi.Output<string>;
    /**
     * Is monitoring enabled for this Virtual Instance.
     */
    public /*out*/ readonly monitoringEnabled!: pulumi.Output<boolean>;
    /**
     * Name of the virtual instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
     */
    public readonly remountOnResume!: pulumi.Output<boolean | undefined>;
    /**
     * RRN of this Virtual Instance.
     */
    public /*out*/ readonly rrn!: pulumi.Output<string>;
    /**
     * Requested virtual instance size. Note that this field is called type in the API documentation.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Virtual Instance state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a VirtualInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualInstanceArgs | VirtualInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualInstanceState | undefined;
            resourceInputs["autoSuspendSeconds"] = state ? state.autoSuspendSeconds : undefined;
            resourceInputs["currentSize"] = state ? state.currentSize : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredSize"] = state ? state.desiredSize : undefined;
            resourceInputs["monitoringEnabled"] = state ? state.monitoringEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remountOnResume"] = state ? state.remountOnResume : undefined;
            resourceInputs["rrn"] = state ? state.rrn : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as VirtualInstanceArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["autoSuspendSeconds"] = args ? args.autoSuspendSeconds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remountOnResume"] = args ? args.remountOnResume : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["currentSize"] = undefined /*out*/;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["desiredSize"] = undefined /*out*/;
            resourceInputs["monitoringEnabled"] = undefined /*out*/;
            resourceInputs["rrn"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualInstance resources.
 */
export interface VirtualInstanceState {
    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    autoSuspendSeconds?: pulumi.Input<number>;
    /**
     * Current size of the virtual instance.
     */
    currentSize?: pulumi.Input<string>;
    /**
     * Is this Virtual Instance the default.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the virtual instance.
     */
    description?: pulumi.Input<string>;
    /**
     * Desired size of the virtual instance.
     */
    desiredSize?: pulumi.Input<string>;
    /**
     * Is monitoring enabled for this Virtual Instance.
     */
    monitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the virtual instance.
     */
    name?: pulumi.Input<string>;
    /**
     * When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
     */
    remountOnResume?: pulumi.Input<boolean>;
    /**
     * RRN of this Virtual Instance.
     */
    rrn?: pulumi.Input<string>;
    /**
     * Requested virtual instance size. Note that this field is called type in the API documentation.
     */
    size?: pulumi.Input<string>;
    /**
     * Virtual Instance state.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualInstance resource.
 */
export interface VirtualInstanceArgs {
    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    autoSuspendSeconds?: pulumi.Input<number>;
    /**
     * Description of the virtual instance.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the virtual instance.
     */
    name?: pulumi.Input<string>;
    /**
     * When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
     */
    remountOnResume?: pulumi.Input<boolean>;
    /**
     * Requested virtual instance size. Note that this field is called type in the API documentation.
     */
    size: pulumi.Input<string>;
}
