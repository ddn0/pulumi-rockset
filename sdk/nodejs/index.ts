// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { CollectionArgs, CollectionState } from "./collection";
export type Collection = import("./collection").Collection;
export const Collection: typeof import("./collection").Collection = null as any;
utilities.lazyLoad(exports, ["Collection"], () => require("./collection"));

export { CollectionMountArgs, CollectionMountState } from "./collectionMount";
export type CollectionMount = import("./collectionMount").CollectionMount;
export const CollectionMount: typeof import("./collectionMount").CollectionMount = null as any;
utilities.lazyLoad(exports, ["CollectionMount"], () => require("./collectionMount"));

export { DynamodbCollectionArgs, DynamodbCollectionState } from "./dynamodbCollection";
export type DynamodbCollection = import("./dynamodbCollection").DynamodbCollection;
export const DynamodbCollection: typeof import("./dynamodbCollection").DynamodbCollection = null as any;
utilities.lazyLoad(exports, ["DynamodbCollection"], () => require("./dynamodbCollection"));

export { DynamodbIntegrationArgs, DynamodbIntegrationState } from "./dynamodbIntegration";
export type DynamodbIntegration = import("./dynamodbIntegration").DynamodbIntegration;
export const DynamodbIntegration: typeof import("./dynamodbIntegration").DynamodbIntegration = null as any;
utilities.lazyLoad(exports, ["DynamodbIntegration"], () => require("./dynamodbIntegration"));

export { GcsCollectionArgs, GcsCollectionState } from "./gcsCollection";
export type GcsCollection = import("./gcsCollection").GcsCollection;
export const GcsCollection: typeof import("./gcsCollection").GcsCollection = null as any;
utilities.lazyLoad(exports, ["GcsCollection"], () => require("./gcsCollection"));

export { GcsIntegrationArgs, GcsIntegrationState } from "./gcsIntegration";
export type GcsIntegration = import("./gcsIntegration").GcsIntegration;
export const GcsIntegration: typeof import("./gcsIntegration").GcsIntegration = null as any;
utilities.lazyLoad(exports, ["GcsIntegration"], () => require("./gcsIntegration"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetQueryLambdaArgs, GetQueryLambdaResult, GetQueryLambdaOutputArgs } from "./getQueryLambda";
export const getQueryLambda: typeof import("./getQueryLambda").getQueryLambda = null as any;
export const getQueryLambdaOutput: typeof import("./getQueryLambda").getQueryLambdaOutput = null as any;
utilities.lazyLoad(exports, ["getQueryLambda","getQueryLambdaOutput"], () => require("./getQueryLambda"));

export { GetQueryLambdaTagArgs, GetQueryLambdaTagResult, GetQueryLambdaTagOutputArgs } from "./getQueryLambdaTag";
export const getQueryLambdaTag: typeof import("./getQueryLambdaTag").getQueryLambdaTag = null as any;
export const getQueryLambdaTagOutput: typeof import("./getQueryLambdaTag").getQueryLambdaTagOutput = null as any;
utilities.lazyLoad(exports, ["getQueryLambdaTag","getQueryLambdaTagOutput"], () => require("./getQueryLambdaTag"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVirtualInstanceArgs, GetVirtualInstanceResult, GetVirtualInstanceOutputArgs } from "./getVirtualInstance";
export const getVirtualInstance: typeof import("./getVirtualInstance").getVirtualInstance = null as any;
export const getVirtualInstanceOutput: typeof import("./getVirtualInstance").getVirtualInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualInstance","getVirtualInstanceOutput"], () => require("./getVirtualInstance"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { KafkaCollectionArgs, KafkaCollectionState } from "./kafkaCollection";
export type KafkaCollection = import("./kafkaCollection").KafkaCollection;
export const KafkaCollection: typeof import("./kafkaCollection").KafkaCollection = null as any;
utilities.lazyLoad(exports, ["KafkaCollection"], () => require("./kafkaCollection"));

export { KafkaIntegrationArgs, KafkaIntegrationState } from "./kafkaIntegration";
export type KafkaIntegration = import("./kafkaIntegration").KafkaIntegration;
export const KafkaIntegration: typeof import("./kafkaIntegration").KafkaIntegration = null as any;
utilities.lazyLoad(exports, ["KafkaIntegration"], () => require("./kafkaIntegration"));

export { KinesisCollectionArgs, KinesisCollectionState } from "./kinesisCollection";
export type KinesisCollection = import("./kinesisCollection").KinesisCollection;
export const KinesisCollection: typeof import("./kinesisCollection").KinesisCollection = null as any;
utilities.lazyLoad(exports, ["KinesisCollection"], () => require("./kinesisCollection"));

export { KinesisIntegrationArgs, KinesisIntegrationState } from "./kinesisIntegration";
export type KinesisIntegration = import("./kinesisIntegration").KinesisIntegration;
export const KinesisIntegration: typeof import("./kinesisIntegration").KinesisIntegration = null as any;
utilities.lazyLoad(exports, ["KinesisIntegration"], () => require("./kinesisIntegration"));

export { MongodbCollectionArgs, MongodbCollectionState } from "./mongodbCollection";
export type MongodbCollection = import("./mongodbCollection").MongodbCollection;
export const MongodbCollection: typeof import("./mongodbCollection").MongodbCollection = null as any;
utilities.lazyLoad(exports, ["MongodbCollection"], () => require("./mongodbCollection"));

export { MongodbIntegrationArgs, MongodbIntegrationState } from "./mongodbIntegration";
export type MongodbIntegration = import("./mongodbIntegration").MongodbIntegration;
export const MongodbIntegration: typeof import("./mongodbIntegration").MongodbIntegration = null as any;
utilities.lazyLoad(exports, ["MongodbIntegration"], () => require("./mongodbIntegration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueryLambdaArgs, QueryLambdaState } from "./queryLambda";
export type QueryLambda = import("./queryLambda").QueryLambda;
export const QueryLambda: typeof import("./queryLambda").QueryLambda = null as any;
utilities.lazyLoad(exports, ["QueryLambda"], () => require("./queryLambda"));

export { QueryLambdaTagArgs, QueryLambdaTagState } from "./queryLambdaTag";
export type QueryLambdaTag = import("./queryLambdaTag").QueryLambdaTag;
export const QueryLambdaTag: typeof import("./queryLambdaTag").QueryLambdaTag = null as any;
utilities.lazyLoad(exports, ["QueryLambdaTag"], () => require("./queryLambdaTag"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { S3CollectionArgs, S3CollectionState } from "./s3collection";
export type S3Collection = import("./s3collection").S3Collection;
export const S3Collection: typeof import("./s3collection").S3Collection = null as any;
utilities.lazyLoad(exports, ["S3Collection"], () => require("./s3collection"));

export { S3IntegrationArgs, S3IntegrationState } from "./s3integration";
export type S3Integration = import("./s3integration").S3Integration;
export const S3Integration: typeof import("./s3integration").S3Integration = null as any;
utilities.lazyLoad(exports, ["S3Integration"], () => require("./s3integration"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { ViewArgs, ViewState } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));

export { VirtualInstanceArgs, VirtualInstanceState } from "./virtualInstance";
export type VirtualInstance = import("./virtualInstance").VirtualInstance;
export const VirtualInstance: typeof import("./virtualInstance").VirtualInstance = null as any;
utilities.lazyLoad(exports, ["VirtualInstance"], () => require("./virtualInstance"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rockset:index/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "rockset:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "rockset:index/collection:Collection":
                return new Collection(name, <any>undefined, { urn })
            case "rockset:index/collectionMount:CollectionMount":
                return new CollectionMount(name, <any>undefined, { urn })
            case "rockset:index/dynamodbCollection:DynamodbCollection":
                return new DynamodbCollection(name, <any>undefined, { urn })
            case "rockset:index/dynamodbIntegration:DynamodbIntegration":
                return new DynamodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/gcsCollection:GcsCollection":
                return new GcsCollection(name, <any>undefined, { urn })
            case "rockset:index/gcsIntegration:GcsIntegration":
                return new GcsIntegration(name, <any>undefined, { urn })
            case "rockset:index/kafkaCollection:KafkaCollection":
                return new KafkaCollection(name, <any>undefined, { urn })
            case "rockset:index/kafkaIntegration:KafkaIntegration":
                return new KafkaIntegration(name, <any>undefined, { urn })
            case "rockset:index/kinesisCollection:KinesisCollection":
                return new KinesisCollection(name, <any>undefined, { urn })
            case "rockset:index/kinesisIntegration:KinesisIntegration":
                return new KinesisIntegration(name, <any>undefined, { urn })
            case "rockset:index/mongodbCollection:MongodbCollection":
                return new MongodbCollection(name, <any>undefined, { urn })
            case "rockset:index/mongodbIntegration:MongodbIntegration":
                return new MongodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/queryLambda:QueryLambda":
                return new QueryLambda(name, <any>undefined, { urn })
            case "rockset:index/queryLambdaTag:QueryLambdaTag":
                return new QueryLambdaTag(name, <any>undefined, { urn })
            case "rockset:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "rockset:index/s3Collection:S3Collection":
                return new S3Collection(name, <any>undefined, { urn })
            case "rockset:index/s3Integration:S3Integration":
                return new S3Integration(name, <any>undefined, { urn })
            case "rockset:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "rockset:index/view:View":
                return new View(name, <any>undefined, { urn })
            case "rockset:index/virtualInstance:VirtualInstance":
                return new VirtualInstance(name, <any>undefined, { urn })
            case "rockset:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rockset", "index/alias", _module)
pulumi.runtime.registerResourceModule("rockset", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("rockset", "index/collection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/collectionMount", _module)
pulumi.runtime.registerResourceModule("rockset", "index/dynamodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/dynamodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/gcsCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/gcsIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/kafkaCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/kafkaIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/kinesisCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/kinesisIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/mongodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/mongodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/queryLambda", _module)
pulumi.runtime.registerResourceModule("rockset", "index/queryLambdaTag", _module)
pulumi.runtime.registerResourceModule("rockset", "index/role", _module)
pulumi.runtime.registerResourceModule("rockset", "index/s3Collection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/s3Integration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/user", _module)
pulumi.runtime.registerResourceModule("rockset", "index/view", _module)
pulumi.runtime.registerResourceModule("rockset", "index/virtualInstance", _module)
pulumi.runtime.registerResourceModule("rockset", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("rockset", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rockset") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
