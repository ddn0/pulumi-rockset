// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVirtualInstance(args: GetVirtualInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rockset:index/getVirtualInstance:getVirtualInstance", {
        "autoSuspendSeconds": args.autoSuspendSeconds,
        "currentSize": args.currentSize,
        "default": args.default,
        "description": args.description,
        "desiredSize": args.desiredSize,
        "enableRemountOnResume": args.enableRemountOnResume,
        "id": args.id,
        "name": args.name,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualInstance.
 */
export interface GetVirtualInstanceArgs {
    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    autoSuspendSeconds?: number;
    /**
     * Virtual Instance current size.
     */
    currentSize?: string;
    /**
     * Virtual Instance name.
     */
    default?: boolean;
    /**
     * Virtual Instance description.
     */
    description?: string;
    /**
     * Virtual Instance desired size.
     */
    desiredSize?: string;
    /**
     * When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
     */
    enableRemountOnResume?: boolean;
    /**
     * Virtual Instance id.
     */
    id: string;
    /**
     * Virtual Instance name.
     */
    name?: string;
    /**
     * Virtual Instance state.
     */
    state?: string;
}

/**
 * A collection of values returned by getVirtualInstance.
 */
export interface GetVirtualInstanceResult {
    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    readonly autoSuspendSeconds?: number;
    /**
     * Virtual Instance current size.
     */
    readonly currentSize?: string;
    /**
     * Virtual Instance name.
     */
    readonly default?: boolean;
    /**
     * Virtual Instance description.
     */
    readonly description?: string;
    /**
     * Virtual Instance desired size.
     */
    readonly desiredSize?: string;
    /**
     * When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
     */
    readonly enableRemountOnResume?: boolean;
    /**
     * Virtual Instance id.
     */
    readonly id: string;
    /**
     * Virtual Instance name.
     */
    readonly name?: string;
    /**
     * Virtual Instance state.
     */
    readonly state?: string;
}
export function getVirtualInstanceOutput(args: GetVirtualInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualInstanceResult> {
    return pulumi.output(args).apply((a: any) => getVirtualInstance(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualInstance.
 */
export interface GetVirtualInstanceOutputArgs {
    /**
     * Number of seconds without queries after which the Virtual Instance is suspended.
     */
    autoSuspendSeconds?: pulumi.Input<number>;
    /**
     * Virtual Instance current size.
     */
    currentSize?: pulumi.Input<string>;
    /**
     * Virtual Instance name.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Virtual Instance description.
     */
    description?: pulumi.Input<string>;
    /**
     * Virtual Instance desired size.
     */
    desiredSize?: pulumi.Input<string>;
    /**
     * When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
     */
    enableRemountOnResume?: pulumi.Input<boolean>;
    /**
     * Virtual Instance id.
     */
    id: pulumi.Input<string>;
    /**
     * Virtual Instance name.
     */
    name?: pulumi.Input<string>;
    /**
     * Virtual Instance state.
     */
    state?: pulumi.Input<string>;
}
