# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetQueryLambdaResult',
    'AwaitableGetQueryLambdaResult',
    'get_query_lambda',
    'get_query_lambda_output',
]

@pulumi.output_type
class GetQueryLambdaResult:
    """
    A collection of values returned by getQueryLambda.
    """
    def __init__(__self__, description=None, id=None, last_executed=None, name=None, sql=None, tag=None, version=None, workspace=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_executed and not isinstance(last_executed, str):
            raise TypeError("Expected argument 'last_executed' to be a str")
        pulumi.set(__self__, "last_executed", last_executed)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sql and not isinstance(sql, str):
            raise TypeError("Expected argument 'sql' to be a str")
        pulumi.set(__self__, "sql", sql)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if workspace and not isinstance(workspace, str):
            raise TypeError("Expected argument 'workspace' to be a str")
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the query lambda.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastExecuted")
    def last_executed(self) -> str:
        """
        Last time the query lambda was executed.
        """
        return pulumi.get(self, "last_executed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the query lambda.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sql(self) -> str:
        """
        Query lambda SQL.
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Tag name.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Query lambda tag version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def workspace(self) -> str:
        """
        Workspace the query lambda resides in.
        """
        return pulumi.get(self, "workspace")


class AwaitableGetQueryLambdaResult(GetQueryLambdaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQueryLambdaResult(
            description=self.description,
            id=self.id,
            last_executed=self.last_executed,
            name=self.name,
            sql=self.sql,
            tag=self.tag,
            version=self.version,
            workspace=self.workspace)


def get_query_lambda(name: Optional[str] = None,
                     tag: Optional[str] = None,
                     workspace: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQueryLambdaResult:
    """
    Gets information about a query lambda. The `tag` defaults to `latest`.


    :param str name: Name of the query lambda.
    :param str tag: Tag name.
    :param str workspace: Workspace the query lambda resides in.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['tag'] = tag
    __args__['workspace'] = workspace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rockset:index/getQueryLambda:getQueryLambda', __args__, opts=opts, typ=GetQueryLambdaResult).value

    return AwaitableGetQueryLambdaResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_executed=pulumi.get(__ret__, 'last_executed'),
        name=pulumi.get(__ret__, 'name'),
        sql=pulumi.get(__ret__, 'sql'),
        tag=pulumi.get(__ret__, 'tag'),
        version=pulumi.get(__ret__, 'version'),
        workspace=pulumi.get(__ret__, 'workspace'))


@_utilities.lift_output_func(get_query_lambda)
def get_query_lambda_output(name: Optional[pulumi.Input[str]] = None,
                            tag: Optional[pulumi.Input[Optional[str]]] = None,
                            workspace: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQueryLambdaResult]:
    """
    Gets information about a query lambda. The `tag` defaults to `latest`.


    :param str name: Name of the query lambda.
    :param str tag: Tag name.
    :param str workspace: Workspace the query lambda resides in.
    """
    ...
