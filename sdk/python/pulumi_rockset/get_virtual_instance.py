# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetVirtualInstanceResult',
    'AwaitableGetVirtualInstanceResult',
    'get_virtual_instance',
    'get_virtual_instance_output',
]

@pulumi.output_type
class GetVirtualInstanceResult:
    """
    A collection of values returned by getVirtualInstance.
    """
    def __init__(__self__, auto_suspend_seconds=None, current_size=None, default=None, description=None, desired_size=None, enable_remount_on_resume=None, id=None, mount_refresh_interval_seconds=None, name=None, state=None):
        if auto_suspend_seconds and not isinstance(auto_suspend_seconds, int):
            raise TypeError("Expected argument 'auto_suspend_seconds' to be a int")
        pulumi.set(__self__, "auto_suspend_seconds", auto_suspend_seconds)
        if current_size and not isinstance(current_size, str):
            raise TypeError("Expected argument 'current_size' to be a str")
        pulumi.set(__self__, "current_size", current_size)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if desired_size and not isinstance(desired_size, str):
            raise TypeError("Expected argument 'desired_size' to be a str")
        pulumi.set(__self__, "desired_size", desired_size)
        if enable_remount_on_resume and not isinstance(enable_remount_on_resume, bool):
            raise TypeError("Expected argument 'enable_remount_on_resume' to be a bool")
        pulumi.set(__self__, "enable_remount_on_resume", enable_remount_on_resume)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mount_refresh_interval_seconds and not isinstance(mount_refresh_interval_seconds, int):
            raise TypeError("Expected argument 'mount_refresh_interval_seconds' to be a int")
        pulumi.set(__self__, "mount_refresh_interval_seconds", mount_refresh_interval_seconds)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="autoSuspendSeconds")
    def auto_suspend_seconds(self) -> Optional[int]:
        """
        Number of seconds without queries after which the Virtual Instance is suspended.
        """
        return pulumi.get(self, "auto_suspend_seconds")

    @property
    @pulumi.getter(name="currentSize")
    def current_size(self) -> Optional[str]:
        """
        Virtual Instance current size.
        """
        return pulumi.get(self, "current_size")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        Virtual Instance name.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Virtual Instance description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredSize")
    def desired_size(self) -> Optional[str]:
        """
        Virtual Instance desired size.
        """
        return pulumi.get(self, "desired_size")

    @property
    @pulumi.getter(name="enableRemountOnResume")
    def enable_remount_on_resume(self) -> Optional[bool]:
        """
        When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
        """
        return pulumi.get(self, "enable_remount_on_resume")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Virtual Instance id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mountRefreshIntervalSeconds")
    def mount_refresh_interval_seconds(self) -> Optional[int]:
        """
        Number of seconds between data refreshes for mounts on this Virtual Instance.
        """
        return pulumi.get(self, "mount_refresh_interval_seconds")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual Instance name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Virtual Instance state.
        """
        return pulumi.get(self, "state")


class AwaitableGetVirtualInstanceResult(GetVirtualInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualInstanceResult(
            auto_suspend_seconds=self.auto_suspend_seconds,
            current_size=self.current_size,
            default=self.default,
            description=self.description,
            desired_size=self.desired_size,
            enable_remount_on_resume=self.enable_remount_on_resume,
            id=self.id,
            mount_refresh_interval_seconds=self.mount_refresh_interval_seconds,
            name=self.name,
            state=self.state)


def get_virtual_instance(auto_suspend_seconds: Optional[int] = None,
                         current_size: Optional[str] = None,
                         default: Optional[bool] = None,
                         description: Optional[str] = None,
                         desired_size: Optional[str] = None,
                         enable_remount_on_resume: Optional[bool] = None,
                         id: Optional[str] = None,
                         mount_refresh_interval_seconds: Optional[int] = None,
                         name: Optional[str] = None,
                         state: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualInstanceResult:
    """
    Use this data source to access information about an existing resource.

    :param int auto_suspend_seconds: Number of seconds without queries after which the Virtual Instance is suspended.
    :param str current_size: Virtual Instance current size.
    :param bool default: Virtual Instance name.
    :param str description: Virtual Instance description.
    :param str desired_size: Virtual Instance desired size.
    :param bool enable_remount_on_resume: When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
    :param str id: Virtual Instance id.
    :param int mount_refresh_interval_seconds: Number of seconds between data refreshes for mounts on this Virtual Instance.
    :param str name: Virtual Instance name.
    :param str state: Virtual Instance state.
    """
    __args__ = dict()
    __args__['autoSuspendSeconds'] = auto_suspend_seconds
    __args__['currentSize'] = current_size
    __args__['default'] = default
    __args__['description'] = description
    __args__['desiredSize'] = desired_size
    __args__['enableRemountOnResume'] = enable_remount_on_resume
    __args__['id'] = id
    __args__['mountRefreshIntervalSeconds'] = mount_refresh_interval_seconds
    __args__['name'] = name
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rockset:index/getVirtualInstance:getVirtualInstance', __args__, opts=opts, typ=GetVirtualInstanceResult).value

    return AwaitableGetVirtualInstanceResult(
        auto_suspend_seconds=pulumi.get(__ret__, 'auto_suspend_seconds'),
        current_size=pulumi.get(__ret__, 'current_size'),
        default=pulumi.get(__ret__, 'default'),
        description=pulumi.get(__ret__, 'description'),
        desired_size=pulumi.get(__ret__, 'desired_size'),
        enable_remount_on_resume=pulumi.get(__ret__, 'enable_remount_on_resume'),
        id=pulumi.get(__ret__, 'id'),
        mount_refresh_interval_seconds=pulumi.get(__ret__, 'mount_refresh_interval_seconds'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_virtual_instance)
def get_virtual_instance_output(auto_suspend_seconds: Optional[pulumi.Input[Optional[int]]] = None,
                                current_size: Optional[pulumi.Input[Optional[str]]] = None,
                                default: Optional[pulumi.Input[Optional[bool]]] = None,
                                description: Optional[pulumi.Input[Optional[str]]] = None,
                                desired_size: Optional[pulumi.Input[Optional[str]]] = None,
                                enable_remount_on_resume: Optional[pulumi.Input[Optional[bool]]] = None,
                                id: Optional[pulumi.Input[str]] = None,
                                mount_refresh_interval_seconds: Optional[pulumi.Input[Optional[int]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                state: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVirtualInstanceResult]:
    """
    Use this data source to access information about an existing resource.

    :param int auto_suspend_seconds: Number of seconds without queries after which the Virtual Instance is suspended.
    :param str current_size: Virtual Instance current size.
    :param bool default: Virtual Instance name.
    :param str description: Virtual Instance description.
    :param str desired_size: Virtual Instance desired size.
    :param bool enable_remount_on_resume: When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
    :param str id: Virtual Instance id.
    :param int mount_refresh_interval_seconds: Number of seconds between data refreshes for mounts on this Virtual Instance.
    :param str name: Virtual Instance name.
    :param str state: Virtual Instance state.
    """
    ...
