// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Virtual Instance. To be able to create a new Virtual Instance,
// The main virtual instance must use a dedicated instance to create a secondary virtual instance,
// which must be SMALL or larger. To enable live mount, the secondary virtual instance must be MEDIUM or larger.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ddn0/pulumi-rockset/sdk/go/rockset"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			query, err := rockset.NewVirtualInstance(ctx, "query", &rockset.VirtualInstanceArgs{
//				Description:     pulumi.String("vi for executing query lambdas"),
//				Size:            pulumi.String("MEDIUM"),
//				RemountOnResume: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rockset.NewCollectionMount(ctx, "patch", &rockset.CollectionMountArgs{
//				VirtualInstanceId: query.ID(),
//				Path:              pulumi.String("commons.data"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import rockset:index/virtualInstance:VirtualInstance query 29e4a43c-fff4-4fe6-80e3-1ee57bc22e82
//
// ```
type VirtualInstance struct {
	pulumi.CustomResourceState

	// Number of seconds without queries after which the Virtual Instance is suspended.
	AutoSuspendSeconds pulumi.IntPtrOutput `pulumi:"autoSuspendSeconds"`
	// Current size of the virtual instance.
	CurrentSize pulumi.StringOutput `pulumi:"currentSize"`
	// Is this Virtual Instance the default.
	Default pulumi.BoolOutput `pulumi:"default"`
	// Description of the virtual instance.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired size of the virtual instance.
	DesiredSize pulumi.StringOutput `pulumi:"desiredSize"`
	// Is monitoring enabled for this Virtual Instance.
	MonitoringEnabled pulumi.BoolOutput `pulumi:"monitoringEnabled"`
	// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
	MountRefreshIntervalSeconds pulumi.IntPtrOutput `pulumi:"mountRefreshIntervalSeconds"`
	// Name of the virtual instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
	RemountOnResume pulumi.BoolPtrOutput `pulumi:"remountOnResume"`
	// RRN of this Virtual Instance.
	Rrn pulumi.StringOutput `pulumi:"rrn"`
	// Requested virtual instance size. Note that this field is called type in the API documentation.
	Size pulumi.StringOutput `pulumi:"size"`
	// Virtual Instance state.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewVirtualInstance registers a new resource with the given unique name, arguments, and options.
func NewVirtualInstance(ctx *pulumi.Context,
	name string, args *VirtualInstanceArgs, opts ...pulumi.ResourceOption) (*VirtualInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualInstance
	err := ctx.RegisterResource("rockset:index/virtualInstance:VirtualInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualInstance gets an existing VirtualInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualInstanceState, opts ...pulumi.ResourceOption) (*VirtualInstance, error) {
	var resource VirtualInstance
	err := ctx.ReadResource("rockset:index/virtualInstance:VirtualInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualInstance resources.
type virtualInstanceState struct {
	// Number of seconds without queries after which the Virtual Instance is suspended.
	AutoSuspendSeconds *int `pulumi:"autoSuspendSeconds"`
	// Current size of the virtual instance.
	CurrentSize *string `pulumi:"currentSize"`
	// Is this Virtual Instance the default.
	Default *bool `pulumi:"default"`
	// Description of the virtual instance.
	Description *string `pulumi:"description"`
	// Desired size of the virtual instance.
	DesiredSize *string `pulumi:"desiredSize"`
	// Is monitoring enabled for this Virtual Instance.
	MonitoringEnabled *bool `pulumi:"monitoringEnabled"`
	// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
	MountRefreshIntervalSeconds *int `pulumi:"mountRefreshIntervalSeconds"`
	// Name of the virtual instance.
	Name *string `pulumi:"name"`
	// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
	RemountOnResume *bool `pulumi:"remountOnResume"`
	// RRN of this Virtual Instance.
	Rrn *string `pulumi:"rrn"`
	// Requested virtual instance size. Note that this field is called type in the API documentation.
	Size *string `pulumi:"size"`
	// Virtual Instance state.
	State *string `pulumi:"state"`
}

type VirtualInstanceState struct {
	// Number of seconds without queries after which the Virtual Instance is suspended.
	AutoSuspendSeconds pulumi.IntPtrInput
	// Current size of the virtual instance.
	CurrentSize pulumi.StringPtrInput
	// Is this Virtual Instance the default.
	Default pulumi.BoolPtrInput
	// Description of the virtual instance.
	Description pulumi.StringPtrInput
	// Desired size of the virtual instance.
	DesiredSize pulumi.StringPtrInput
	// Is monitoring enabled for this Virtual Instance.
	MonitoringEnabled pulumi.BoolPtrInput
	// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
	MountRefreshIntervalSeconds pulumi.IntPtrInput
	// Name of the virtual instance.
	Name pulumi.StringPtrInput
	// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
	RemountOnResume pulumi.BoolPtrInput
	// RRN of this Virtual Instance.
	Rrn pulumi.StringPtrInput
	// Requested virtual instance size. Note that this field is called type in the API documentation.
	Size pulumi.StringPtrInput
	// Virtual Instance state.
	State pulumi.StringPtrInput
}

func (VirtualInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualInstanceState)(nil)).Elem()
}

type virtualInstanceArgs struct {
	// Number of seconds without queries after which the Virtual Instance is suspended.
	AutoSuspendSeconds *int `pulumi:"autoSuspendSeconds"`
	// Description of the virtual instance.
	Description *string `pulumi:"description"`
	// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
	MountRefreshIntervalSeconds *int `pulumi:"mountRefreshIntervalSeconds"`
	// Name of the virtual instance.
	Name *string `pulumi:"name"`
	// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
	RemountOnResume *bool `pulumi:"remountOnResume"`
	// Requested virtual instance size. Note that this field is called type in the API documentation.
	Size string `pulumi:"size"`
}

// The set of arguments for constructing a VirtualInstance resource.
type VirtualInstanceArgs struct {
	// Number of seconds without queries after which the Virtual Instance is suspended.
	AutoSuspendSeconds pulumi.IntPtrInput
	// Description of the virtual instance.
	Description pulumi.StringPtrInput
	// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
	MountRefreshIntervalSeconds pulumi.IntPtrInput
	// Name of the virtual instance.
	Name pulumi.StringPtrInput
	// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
	RemountOnResume pulumi.BoolPtrInput
	// Requested virtual instance size. Note that this field is called type in the API documentation.
	Size pulumi.StringInput
}

func (VirtualInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualInstanceArgs)(nil)).Elem()
}

type VirtualInstanceInput interface {
	pulumi.Input

	ToVirtualInstanceOutput() VirtualInstanceOutput
	ToVirtualInstanceOutputWithContext(ctx context.Context) VirtualInstanceOutput
}

func (*VirtualInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualInstance)(nil)).Elem()
}

func (i *VirtualInstance) ToVirtualInstanceOutput() VirtualInstanceOutput {
	return i.ToVirtualInstanceOutputWithContext(context.Background())
}

func (i *VirtualInstance) ToVirtualInstanceOutputWithContext(ctx context.Context) VirtualInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualInstanceOutput)
}

// VirtualInstanceArrayInput is an input type that accepts VirtualInstanceArray and VirtualInstanceArrayOutput values.
// You can construct a concrete instance of `VirtualInstanceArrayInput` via:
//
//	VirtualInstanceArray{ VirtualInstanceArgs{...} }
type VirtualInstanceArrayInput interface {
	pulumi.Input

	ToVirtualInstanceArrayOutput() VirtualInstanceArrayOutput
	ToVirtualInstanceArrayOutputWithContext(context.Context) VirtualInstanceArrayOutput
}

type VirtualInstanceArray []VirtualInstanceInput

func (VirtualInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualInstance)(nil)).Elem()
}

func (i VirtualInstanceArray) ToVirtualInstanceArrayOutput() VirtualInstanceArrayOutput {
	return i.ToVirtualInstanceArrayOutputWithContext(context.Background())
}

func (i VirtualInstanceArray) ToVirtualInstanceArrayOutputWithContext(ctx context.Context) VirtualInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualInstanceArrayOutput)
}

// VirtualInstanceMapInput is an input type that accepts VirtualInstanceMap and VirtualInstanceMapOutput values.
// You can construct a concrete instance of `VirtualInstanceMapInput` via:
//
//	VirtualInstanceMap{ "key": VirtualInstanceArgs{...} }
type VirtualInstanceMapInput interface {
	pulumi.Input

	ToVirtualInstanceMapOutput() VirtualInstanceMapOutput
	ToVirtualInstanceMapOutputWithContext(context.Context) VirtualInstanceMapOutput
}

type VirtualInstanceMap map[string]VirtualInstanceInput

func (VirtualInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualInstance)(nil)).Elem()
}

func (i VirtualInstanceMap) ToVirtualInstanceMapOutput() VirtualInstanceMapOutput {
	return i.ToVirtualInstanceMapOutputWithContext(context.Background())
}

func (i VirtualInstanceMap) ToVirtualInstanceMapOutputWithContext(ctx context.Context) VirtualInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualInstanceMapOutput)
}

type VirtualInstanceOutput struct{ *pulumi.OutputState }

func (VirtualInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualInstance)(nil)).Elem()
}

func (o VirtualInstanceOutput) ToVirtualInstanceOutput() VirtualInstanceOutput {
	return o
}

func (o VirtualInstanceOutput) ToVirtualInstanceOutputWithContext(ctx context.Context) VirtualInstanceOutput {
	return o
}

// Number of seconds without queries after which the Virtual Instance is suspended.
func (o VirtualInstanceOutput) AutoSuspendSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.IntPtrOutput { return v.AutoSuspendSeconds }).(pulumi.IntPtrOutput)
}

// Current size of the virtual instance.
func (o VirtualInstanceOutput) CurrentSize() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.CurrentSize }).(pulumi.StringOutput)
}

// Is this Virtual Instance the default.
func (o VirtualInstanceOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// Description of the virtual instance.
func (o VirtualInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired size of the virtual instance.
func (o VirtualInstanceOutput) DesiredSize() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.DesiredSize }).(pulumi.StringOutput)
}

// Is monitoring enabled for this Virtual Instance.
func (o VirtualInstanceOutput) MonitoringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.BoolOutput { return v.MonitoringEnabled }).(pulumi.BoolOutput)
}

// Number of seconds between data refreshes for mounts on this Virtual Instance. A value of 0 means continuous refresh and a value of null means never refresh.
func (o VirtualInstanceOutput) MountRefreshIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.IntPtrOutput { return v.MountRefreshIntervalSeconds }).(pulumi.IntPtrOutput)
}

// Name of the virtual instance.
func (o VirtualInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// When a Virtual Instance is resumed, remount all collections that were mounted when the Virtual Instance was suspended.
func (o VirtualInstanceOutput) RemountOnResume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.BoolPtrOutput { return v.RemountOnResume }).(pulumi.BoolPtrOutput)
}

// RRN of this Virtual Instance.
func (o VirtualInstanceOutput) Rrn() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.Rrn }).(pulumi.StringOutput)
}

// Requested virtual instance size. Note that this field is called type in the API documentation.
func (o VirtualInstanceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// Virtual Instance state.
func (o VirtualInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type VirtualInstanceArrayOutput struct{ *pulumi.OutputState }

func (VirtualInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualInstance)(nil)).Elem()
}

func (o VirtualInstanceArrayOutput) ToVirtualInstanceArrayOutput() VirtualInstanceArrayOutput {
	return o
}

func (o VirtualInstanceArrayOutput) ToVirtualInstanceArrayOutputWithContext(ctx context.Context) VirtualInstanceArrayOutput {
	return o
}

func (o VirtualInstanceArrayOutput) Index(i pulumi.IntInput) VirtualInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualInstance {
		return vs[0].([]*VirtualInstance)[vs[1].(int)]
	}).(VirtualInstanceOutput)
}

type VirtualInstanceMapOutput struct{ *pulumi.OutputState }

func (VirtualInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualInstance)(nil)).Elem()
}

func (o VirtualInstanceMapOutput) ToVirtualInstanceMapOutput() VirtualInstanceMapOutput {
	return o
}

func (o VirtualInstanceMapOutput) ToVirtualInstanceMapOutputWithContext(ctx context.Context) VirtualInstanceMapOutput {
	return o
}

func (o VirtualInstanceMapOutput) MapIndex(k pulumi.StringInput) VirtualInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualInstance {
		return vs[0].(map[string]*VirtualInstance)[vs[1].(string)]
	}).(VirtualInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualInstanceInput)(nil)).Elem(), &VirtualInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualInstanceArrayInput)(nil)).Elem(), VirtualInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualInstanceMapInput)(nil)).Elem(), VirtualInstanceMap{})
	pulumi.RegisterOutputType(VirtualInstanceOutput{})
	pulumi.RegisterOutputType(VirtualInstanceArrayOutput{})
	pulumi.RegisterOutputType(VirtualInstanceMapOutput{})
}
