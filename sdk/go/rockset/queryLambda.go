// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Query Lambda.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/ddn0/pulumi-rockset/sdk/go/rockset"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			pinned_version := cfg.RequireObject("pinned-version")
//			_, err := rockset.NewQueryLambda(ctx, "top-movies", &rockset.QueryLambdaArgs{
//				Workspace: pulumi.String("commons"),
//				Sqls: rockset.QueryLambdaSqlArray{
//					&rockset.QueryLambdaSqlArgs{
//						Query: readFileOrPanic(fmt.Sprintf("%v/data/top_movies.sql", path.Module)),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			var tmp0 pulumi.String
//			if pinned_version == nil {
//				tmp0 = top_movies.Version
//			} else {
//				tmp0 = pulumi.Any(pinned_version)
//			}
//			_, err = rockset.NewQueryLambdaTag(ctx, "active", &rockset.QueryLambdaTagArgs{
//				QueryLambda: top_movies.Name,
//				Workspace:   pulumi.String("commons"),
//				Version:     pulumi.String(tmp0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type QueryLambda struct {
	pulumi.CustomResourceState

	// Text describing the query lambda.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput       `pulumi:"name"`
	Sqls QueryLambdaSqlArrayOutput `pulumi:"sqls"`
	// The latest state of this query lambda.
	State pulumi.StringOutput `pulumi:"state"`
	// The latest version string of this query lambda.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewQueryLambda registers a new resource with the given unique name, arguments, and options.
func NewQueryLambda(ctx *pulumi.Context,
	name string, args *QueryLambdaArgs, opts ...pulumi.ResourceOption) (*QueryLambda, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sqls == nil {
		return nil, errors.New("invalid value for required argument 'Sqls'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueryLambda
	err := ctx.RegisterResource("rockset:index/queryLambda:QueryLambda", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryLambda gets an existing QueryLambda resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryLambda(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryLambdaState, opts ...pulumi.ResourceOption) (*QueryLambda, error) {
	var resource QueryLambda
	err := ctx.ReadResource("rockset:index/queryLambda:QueryLambda", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryLambda resources.
type queryLambdaState struct {
	// Text describing the query lambda.
	Description *string `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name *string          `pulumi:"name"`
	Sqls []QueryLambdaSql `pulumi:"sqls"`
	// The latest state of this query lambda.
	State *string `pulumi:"state"`
	// The latest version string of this query lambda.
	Version *string `pulumi:"version"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type QueryLambdaState struct {
	// Text describing the query lambda.
	Description pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	Sqls QueryLambdaSqlArrayInput
	// The latest state of this query lambda.
	State pulumi.StringPtrInput
	// The latest version string of this query lambda.
	Version pulumi.StringPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (QueryLambdaState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLambdaState)(nil)).Elem()
}

type queryLambdaArgs struct {
	// Text describing the query lambda.
	Description *string `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name *string          `pulumi:"name"`
	Sqls []QueryLambdaSql `pulumi:"sqls"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a QueryLambda resource.
type QueryLambdaArgs struct {
	// Text describing the query lambda.
	Description pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	Sqls QueryLambdaSqlArrayInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (QueryLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLambdaArgs)(nil)).Elem()
}

type QueryLambdaInput interface {
	pulumi.Input

	ToQueryLambdaOutput() QueryLambdaOutput
	ToQueryLambdaOutputWithContext(ctx context.Context) QueryLambdaOutput
}

func (*QueryLambda) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLambda)(nil)).Elem()
}

func (i *QueryLambda) ToQueryLambdaOutput() QueryLambdaOutput {
	return i.ToQueryLambdaOutputWithContext(context.Background())
}

func (i *QueryLambda) ToQueryLambdaOutputWithContext(ctx context.Context) QueryLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaOutput)
}

// QueryLambdaArrayInput is an input type that accepts QueryLambdaArray and QueryLambdaArrayOutput values.
// You can construct a concrete instance of `QueryLambdaArrayInput` via:
//
//	QueryLambdaArray{ QueryLambdaArgs{...} }
type QueryLambdaArrayInput interface {
	pulumi.Input

	ToQueryLambdaArrayOutput() QueryLambdaArrayOutput
	ToQueryLambdaArrayOutputWithContext(context.Context) QueryLambdaArrayOutput
}

type QueryLambdaArray []QueryLambdaInput

func (QueryLambdaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLambda)(nil)).Elem()
}

func (i QueryLambdaArray) ToQueryLambdaArrayOutput() QueryLambdaArrayOutput {
	return i.ToQueryLambdaArrayOutputWithContext(context.Background())
}

func (i QueryLambdaArray) ToQueryLambdaArrayOutputWithContext(ctx context.Context) QueryLambdaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaArrayOutput)
}

// QueryLambdaMapInput is an input type that accepts QueryLambdaMap and QueryLambdaMapOutput values.
// You can construct a concrete instance of `QueryLambdaMapInput` via:
//
//	QueryLambdaMap{ "key": QueryLambdaArgs{...} }
type QueryLambdaMapInput interface {
	pulumi.Input

	ToQueryLambdaMapOutput() QueryLambdaMapOutput
	ToQueryLambdaMapOutputWithContext(context.Context) QueryLambdaMapOutput
}

type QueryLambdaMap map[string]QueryLambdaInput

func (QueryLambdaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLambda)(nil)).Elem()
}

func (i QueryLambdaMap) ToQueryLambdaMapOutput() QueryLambdaMapOutput {
	return i.ToQueryLambdaMapOutputWithContext(context.Background())
}

func (i QueryLambdaMap) ToQueryLambdaMapOutputWithContext(ctx context.Context) QueryLambdaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaMapOutput)
}

type QueryLambdaOutput struct{ *pulumi.OutputState }

func (QueryLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLambda)(nil)).Elem()
}

func (o QueryLambdaOutput) ToQueryLambdaOutput() QueryLambdaOutput {
	return o
}

func (o QueryLambdaOutput) ToQueryLambdaOutputWithContext(ctx context.Context) QueryLambdaOutput {
	return o
}

// Text describing the query lambda.
func (o QueryLambdaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryLambda) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
func (o QueryLambdaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambda) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QueryLambdaOutput) Sqls() QueryLambdaSqlArrayOutput {
	return o.ApplyT(func(v *QueryLambda) QueryLambdaSqlArrayOutput { return v.Sqls }).(QueryLambdaSqlArrayOutput)
}

// The latest state of this query lambda.
func (o QueryLambdaOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambda) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The latest version string of this query lambda.
func (o QueryLambdaOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambda) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The name of the workspace.
func (o QueryLambdaOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambda) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type QueryLambdaArrayOutput struct{ *pulumi.OutputState }

func (QueryLambdaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLambda)(nil)).Elem()
}

func (o QueryLambdaArrayOutput) ToQueryLambdaArrayOutput() QueryLambdaArrayOutput {
	return o
}

func (o QueryLambdaArrayOutput) ToQueryLambdaArrayOutputWithContext(ctx context.Context) QueryLambdaArrayOutput {
	return o
}

func (o QueryLambdaArrayOutput) Index(i pulumi.IntInput) QueryLambdaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueryLambda {
		return vs[0].([]*QueryLambda)[vs[1].(int)]
	}).(QueryLambdaOutput)
}

type QueryLambdaMapOutput struct{ *pulumi.OutputState }

func (QueryLambdaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLambda)(nil)).Elem()
}

func (o QueryLambdaMapOutput) ToQueryLambdaMapOutput() QueryLambdaMapOutput {
	return o
}

func (o QueryLambdaMapOutput) ToQueryLambdaMapOutputWithContext(ctx context.Context) QueryLambdaMapOutput {
	return o
}

func (o QueryLambdaMapOutput) MapIndex(k pulumi.StringInput) QueryLambdaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueryLambda {
		return vs[0].(map[string]*QueryLambda)[vs[1].(string)]
	}).(QueryLambdaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaInput)(nil)).Elem(), &QueryLambda{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaArrayInput)(nil)).Elem(), QueryLambdaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaMapInput)(nil)).Elem(), QueryLambdaMap{})
	pulumi.RegisterOutputType(QueryLambdaOutput{})
	pulumi.RegisterOutputType(QueryLambdaArrayOutput{})
	pulumi.RegisterOutputType(QueryLambdaMapOutput{})
}
