// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Kinesis Integration.
type KinesisIntegration struct {
	pulumi.CustomResourceState

	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringOutput `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewKinesisIntegration registers a new resource with the given unique name, arguments, and options.
func NewKinesisIntegration(ctx *pulumi.Context,
	name string, args *KinesisIntegrationArgs, opts ...pulumi.ResourceOption) (*KinesisIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AwsRoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KinesisIntegration
	err := ctx.RegisterResource("rockset:index/kinesisIntegration:KinesisIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKinesisIntegration gets an existing KinesisIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKinesisIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KinesisIntegrationState, opts ...pulumi.ResourceOption) (*KinesisIntegration, error) {
	var resource KinesisIntegration
	err := ctx.ReadResource("rockset:index/kinesisIntegration:KinesisIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KinesisIntegration resources.
type kinesisIntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

type KinesisIntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (KinesisIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisIntegrationState)(nil)).Elem()
}

type kinesisIntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a KinesisIntegration resource.
type KinesisIntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (KinesisIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisIntegrationArgs)(nil)).Elem()
}

type KinesisIntegrationInput interface {
	pulumi.Input

	ToKinesisIntegrationOutput() KinesisIntegrationOutput
	ToKinesisIntegrationOutputWithContext(ctx context.Context) KinesisIntegrationOutput
}

func (*KinesisIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisIntegration)(nil)).Elem()
}

func (i *KinesisIntegration) ToKinesisIntegrationOutput() KinesisIntegrationOutput {
	return i.ToKinesisIntegrationOutputWithContext(context.Background())
}

func (i *KinesisIntegration) ToKinesisIntegrationOutputWithContext(ctx context.Context) KinesisIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisIntegrationOutput)
}

// KinesisIntegrationArrayInput is an input type that accepts KinesisIntegrationArray and KinesisIntegrationArrayOutput values.
// You can construct a concrete instance of `KinesisIntegrationArrayInput` via:
//
//	KinesisIntegrationArray{ KinesisIntegrationArgs{...} }
type KinesisIntegrationArrayInput interface {
	pulumi.Input

	ToKinesisIntegrationArrayOutput() KinesisIntegrationArrayOutput
	ToKinesisIntegrationArrayOutputWithContext(context.Context) KinesisIntegrationArrayOutput
}

type KinesisIntegrationArray []KinesisIntegrationInput

func (KinesisIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisIntegration)(nil)).Elem()
}

func (i KinesisIntegrationArray) ToKinesisIntegrationArrayOutput() KinesisIntegrationArrayOutput {
	return i.ToKinesisIntegrationArrayOutputWithContext(context.Background())
}

func (i KinesisIntegrationArray) ToKinesisIntegrationArrayOutputWithContext(ctx context.Context) KinesisIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisIntegrationArrayOutput)
}

// KinesisIntegrationMapInput is an input type that accepts KinesisIntegrationMap and KinesisIntegrationMapOutput values.
// You can construct a concrete instance of `KinesisIntegrationMapInput` via:
//
//	KinesisIntegrationMap{ "key": KinesisIntegrationArgs{...} }
type KinesisIntegrationMapInput interface {
	pulumi.Input

	ToKinesisIntegrationMapOutput() KinesisIntegrationMapOutput
	ToKinesisIntegrationMapOutputWithContext(context.Context) KinesisIntegrationMapOutput
}

type KinesisIntegrationMap map[string]KinesisIntegrationInput

func (KinesisIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisIntegration)(nil)).Elem()
}

func (i KinesisIntegrationMap) ToKinesisIntegrationMapOutput() KinesisIntegrationMapOutput {
	return i.ToKinesisIntegrationMapOutputWithContext(context.Background())
}

func (i KinesisIntegrationMap) ToKinesisIntegrationMapOutputWithContext(ctx context.Context) KinesisIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisIntegrationMapOutput)
}

type KinesisIntegrationOutput struct{ *pulumi.OutputState }

func (KinesisIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisIntegration)(nil)).Elem()
}

func (o KinesisIntegrationOutput) ToKinesisIntegrationOutput() KinesisIntegrationOutput {
	return o
}

func (o KinesisIntegrationOutput) ToKinesisIntegrationOutputWithContext(ctx context.Context) KinesisIntegrationOutput {
	return o
}

// The AWS Role Arn to use for this integration.
func (o KinesisIntegrationOutput) AwsRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisIntegration) pulumi.StringOutput { return v.AwsRoleArn }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o KinesisIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o KinesisIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type KinesisIntegrationArrayOutput struct{ *pulumi.OutputState }

func (KinesisIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisIntegration)(nil)).Elem()
}

func (o KinesisIntegrationArrayOutput) ToKinesisIntegrationArrayOutput() KinesisIntegrationArrayOutput {
	return o
}

func (o KinesisIntegrationArrayOutput) ToKinesisIntegrationArrayOutputWithContext(ctx context.Context) KinesisIntegrationArrayOutput {
	return o
}

func (o KinesisIntegrationArrayOutput) Index(i pulumi.IntInput) KinesisIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KinesisIntegration {
		return vs[0].([]*KinesisIntegration)[vs[1].(int)]
	}).(KinesisIntegrationOutput)
}

type KinesisIntegrationMapOutput struct{ *pulumi.OutputState }

func (KinesisIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisIntegration)(nil)).Elem()
}

func (o KinesisIntegrationMapOutput) ToKinesisIntegrationMapOutput() KinesisIntegrationMapOutput {
	return o
}

func (o KinesisIntegrationMapOutput) ToKinesisIntegrationMapOutputWithContext(ctx context.Context) KinesisIntegrationMapOutput {
	return o
}

func (o KinesisIntegrationMapOutput) MapIndex(k pulumi.StringInput) KinesisIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KinesisIntegration {
		return vs[0].(map[string]*KinesisIntegration)[vs[1].(string)]
	}).(KinesisIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisIntegrationInput)(nil)).Elem(), &KinesisIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisIntegrationArrayInput)(nil)).Elem(), KinesisIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisIntegrationMapInput)(nil)).Elem(), KinesisIntegrationMap{})
	pulumi.RegisterOutputType(KinesisIntegrationOutput{})
	pulumi.RegisterOutputType(KinesisIntegrationArrayOutput{})
	pulumi.RegisterOutputType(KinesisIntegrationMapOutput{})
}
