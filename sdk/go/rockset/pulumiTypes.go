// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DynamodbCollectionSource struct {
	// AWS region name of DynamoDB table, by default us-west-2 is used.
	AwsRegion *string `pulumi:"awsRegion"`
	// The name of the Rockset DynamoDB integration.
	IntegrationName string `pulumi:"integrationName"`
	// Max RCU usage for scan.
	Rcu *int `pulumi:"rcu"`
	// DynamoDB scan end time.
	ScanEndTime *string `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed *int `pulumi:"scanRecordsProcessed"`
	// DynamoDB scan start time.
	ScanStartTime *string `pulumi:"scanStartTime"`
	// Number of records in DynamoDB table at time of scan.
	ScanTotalRecords *int `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State *string `pulumi:"state"`
	// ISO-8601 date when source was last processed.
	StreamLastProcessedAt *string `pulumi:"streamLastProcessedAt"`
	// Name of DynamoDB table containing data.
	TableName string `pulumi:"tableName"`
	// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
	UseScanApi *bool `pulumi:"useScanApi"`
}

// DynamodbCollectionSourceInput is an input type that accepts DynamodbCollectionSourceArgs and DynamodbCollectionSourceOutput values.
// You can construct a concrete instance of `DynamodbCollectionSourceInput` via:
//
//	DynamodbCollectionSourceArgs{...}
type DynamodbCollectionSourceInput interface {
	pulumi.Input

	ToDynamodbCollectionSourceOutput() DynamodbCollectionSourceOutput
	ToDynamodbCollectionSourceOutputWithContext(context.Context) DynamodbCollectionSourceOutput
}

type DynamodbCollectionSourceArgs struct {
	// AWS region name of DynamoDB table, by default us-west-2 is used.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// The name of the Rockset DynamoDB integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Max RCU usage for scan.
	Rcu pulumi.IntPtrInput `pulumi:"rcu"`
	// DynamoDB scan end time.
	ScanEndTime pulumi.StringPtrInput `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed pulumi.IntPtrInput `pulumi:"scanRecordsProcessed"`
	// DynamoDB scan start time.
	ScanStartTime pulumi.StringPtrInput `pulumi:"scanStartTime"`
	// Number of records in DynamoDB table at time of scan.
	ScanTotalRecords pulumi.IntPtrInput `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State pulumi.StringPtrInput `pulumi:"state"`
	// ISO-8601 date when source was last processed.
	StreamLastProcessedAt pulumi.StringPtrInput `pulumi:"streamLastProcessedAt"`
	// Name of DynamoDB table containing data.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
	UseScanApi pulumi.BoolPtrInput `pulumi:"useScanApi"`
}

func (DynamodbCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamodbCollectionSource)(nil)).Elem()
}

func (i DynamodbCollectionSourceArgs) ToDynamodbCollectionSourceOutput() DynamodbCollectionSourceOutput {
	return i.ToDynamodbCollectionSourceOutputWithContext(context.Background())
}

func (i DynamodbCollectionSourceArgs) ToDynamodbCollectionSourceOutputWithContext(ctx context.Context) DynamodbCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamodbCollectionSourceOutput)
}

// DynamodbCollectionSourceArrayInput is an input type that accepts DynamodbCollectionSourceArray and DynamodbCollectionSourceArrayOutput values.
// You can construct a concrete instance of `DynamodbCollectionSourceArrayInput` via:
//
//	DynamodbCollectionSourceArray{ DynamodbCollectionSourceArgs{...} }
type DynamodbCollectionSourceArrayInput interface {
	pulumi.Input

	ToDynamodbCollectionSourceArrayOutput() DynamodbCollectionSourceArrayOutput
	ToDynamodbCollectionSourceArrayOutputWithContext(context.Context) DynamodbCollectionSourceArrayOutput
}

type DynamodbCollectionSourceArray []DynamodbCollectionSourceInput

func (DynamodbCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamodbCollectionSource)(nil)).Elem()
}

func (i DynamodbCollectionSourceArray) ToDynamodbCollectionSourceArrayOutput() DynamodbCollectionSourceArrayOutput {
	return i.ToDynamodbCollectionSourceArrayOutputWithContext(context.Background())
}

func (i DynamodbCollectionSourceArray) ToDynamodbCollectionSourceArrayOutputWithContext(ctx context.Context) DynamodbCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamodbCollectionSourceArrayOutput)
}

type DynamodbCollectionSourceOutput struct{ *pulumi.OutputState }

func (DynamodbCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamodbCollectionSource)(nil)).Elem()
}

func (o DynamodbCollectionSourceOutput) ToDynamodbCollectionSourceOutput() DynamodbCollectionSourceOutput {
	return o
}

func (o DynamodbCollectionSourceOutput) ToDynamodbCollectionSourceOutputWithContext(ctx context.Context) DynamodbCollectionSourceOutput {
	return o
}

// AWS region name of DynamoDB table, by default us-west-2 is used.
func (o DynamodbCollectionSourceOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// The name of the Rockset DynamoDB integration.
func (o DynamodbCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Max RCU usage for scan.
func (o DynamodbCollectionSourceOutput) Rcu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *int { return v.Rcu }).(pulumi.IntPtrOutput)
}

// DynamoDB scan end time.
func (o DynamodbCollectionSourceOutput) ScanEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *string { return v.ScanEndTime }).(pulumi.StringPtrOutput)
}

// Number of records inserted using scan.
func (o DynamodbCollectionSourceOutput) ScanRecordsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *int { return v.ScanRecordsProcessed }).(pulumi.IntPtrOutput)
}

// DynamoDB scan start time.
func (o DynamodbCollectionSourceOutput) ScanStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *string { return v.ScanStartTime }).(pulumi.StringPtrOutput)
}

// Number of records in DynamoDB table at time of scan.
func (o DynamodbCollectionSourceOutput) ScanTotalRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *int { return v.ScanTotalRecords }).(pulumi.IntPtrOutput)
}

// State of current ingest for this table.
func (o DynamodbCollectionSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *string { return v.State }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when source was last processed.
func (o DynamodbCollectionSourceOutput) StreamLastProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *string { return v.StreamLastProcessedAt }).(pulumi.StringPtrOutput)
}

// Name of DynamoDB table containing data.
func (o DynamodbCollectionSourceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) string { return v.TableName }).(pulumi.StringOutput)
}

// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
func (o DynamodbCollectionSourceOutput) UseScanApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DynamodbCollectionSource) *bool { return v.UseScanApi }).(pulumi.BoolPtrOutput)
}

type DynamodbCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (DynamodbCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DynamodbCollectionSource)(nil)).Elem()
}

func (o DynamodbCollectionSourceArrayOutput) ToDynamodbCollectionSourceArrayOutput() DynamodbCollectionSourceArrayOutput {
	return o
}

func (o DynamodbCollectionSourceArrayOutput) ToDynamodbCollectionSourceArrayOutputWithContext(ctx context.Context) DynamodbCollectionSourceArrayOutput {
	return o
}

func (o DynamodbCollectionSourceArrayOutput) Index(i pulumi.IntInput) DynamodbCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DynamodbCollectionSource {
		return vs[0].([]DynamodbCollectionSource)[vs[1].(int)]
	}).(DynamodbCollectionSourceOutput)
}

type GcsCollectionSource struct {
	// GCS bucket containing the target data.
	Bucket string                  `pulumi:"bucket"`
	Csv    *GcsCollectionSourceCsv `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format string `pulumi:"format"`
	// The name of the Rockset GCS integration.
	IntegrationName string `pulumi:"integrationName"`
	// Simple path prefix to GCS key.
	Prefix *string                 `pulumi:"prefix"`
	Xml    *GcsCollectionSourceXml `pulumi:"xml"`
}

// GcsCollectionSourceInput is an input type that accepts GcsCollectionSourceArgs and GcsCollectionSourceOutput values.
// You can construct a concrete instance of `GcsCollectionSourceInput` via:
//
//	GcsCollectionSourceArgs{...}
type GcsCollectionSourceInput interface {
	pulumi.Input

	ToGcsCollectionSourceOutput() GcsCollectionSourceOutput
	ToGcsCollectionSourceOutputWithContext(context.Context) GcsCollectionSourceOutput
}

type GcsCollectionSourceArgs struct {
	// GCS bucket containing the target data.
	Bucket pulumi.StringInput             `pulumi:"bucket"`
	Csv    GcsCollectionSourceCsvPtrInput `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset GCS integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Simple path prefix to GCS key.
	Prefix pulumi.StringPtrInput          `pulumi:"prefix"`
	Xml    GcsCollectionSourceXmlPtrInput `pulumi:"xml"`
}

func (GcsCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSource)(nil)).Elem()
}

func (i GcsCollectionSourceArgs) ToGcsCollectionSourceOutput() GcsCollectionSourceOutput {
	return i.ToGcsCollectionSourceOutputWithContext(context.Background())
}

func (i GcsCollectionSourceArgs) ToGcsCollectionSourceOutputWithContext(ctx context.Context) GcsCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceOutput)
}

// GcsCollectionSourceArrayInput is an input type that accepts GcsCollectionSourceArray and GcsCollectionSourceArrayOutput values.
// You can construct a concrete instance of `GcsCollectionSourceArrayInput` via:
//
//	GcsCollectionSourceArray{ GcsCollectionSourceArgs{...} }
type GcsCollectionSourceArrayInput interface {
	pulumi.Input

	ToGcsCollectionSourceArrayOutput() GcsCollectionSourceArrayOutput
	ToGcsCollectionSourceArrayOutputWithContext(context.Context) GcsCollectionSourceArrayOutput
}

type GcsCollectionSourceArray []GcsCollectionSourceInput

func (GcsCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcsCollectionSource)(nil)).Elem()
}

func (i GcsCollectionSourceArray) ToGcsCollectionSourceArrayOutput() GcsCollectionSourceArrayOutput {
	return i.ToGcsCollectionSourceArrayOutputWithContext(context.Background())
}

func (i GcsCollectionSourceArray) ToGcsCollectionSourceArrayOutputWithContext(ctx context.Context) GcsCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceArrayOutput)
}

type GcsCollectionSourceOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSource)(nil)).Elem()
}

func (o GcsCollectionSourceOutput) ToGcsCollectionSourceOutput() GcsCollectionSourceOutput {
	return o
}

func (o GcsCollectionSourceOutput) ToGcsCollectionSourceOutputWithContext(ctx context.Context) GcsCollectionSourceOutput {
	return o
}

// GCS bucket containing the target data.
func (o GcsCollectionSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GcsCollectionSource) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GcsCollectionSourceOutput) Csv() GcsCollectionSourceCsvPtrOutput {
	return o.ApplyT(func(v GcsCollectionSource) *GcsCollectionSourceCsv { return v.Csv }).(GcsCollectionSourceCsvPtrOutput)
}

// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
func (o GcsCollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GcsCollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset GCS integration.
func (o GcsCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v GcsCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Simple path prefix to GCS key.
func (o GcsCollectionSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o GcsCollectionSourceOutput) Xml() GcsCollectionSourceXmlPtrOutput {
	return o.ApplyT(func(v GcsCollectionSource) *GcsCollectionSourceXml { return v.Xml }).(GcsCollectionSourceXmlPtrOutput)
}

type GcsCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GcsCollectionSource)(nil)).Elem()
}

func (o GcsCollectionSourceArrayOutput) ToGcsCollectionSourceArrayOutput() GcsCollectionSourceArrayOutput {
	return o
}

func (o GcsCollectionSourceArrayOutput) ToGcsCollectionSourceArrayOutputWithContext(ctx context.Context) GcsCollectionSourceArrayOutput {
	return o
}

func (o GcsCollectionSourceArrayOutput) Index(i pulumi.IntInput) GcsCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GcsCollectionSource {
		return vs[0].([]GcsCollectionSource)[vs[1].(int)]
	}).(GcsCollectionSourceOutput)
}

type GcsCollectionSourceCsv struct {
	// The names of the columns.
	ColumnNames []string `pulumi:"columnNames"`
	// The types of the columns.
	ColumnTypes []string `pulumi:"columnTypes"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding *string `pulumi:"encoding"`
	// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
	EscapeChar *string `pulumi:"escapeChar"`
	// If the first line in every object specifies the column names.
	FirstLineAsColumnNames *bool `pulumi:"firstLineAsColumnNames"`
	// Character within which a cell value is enclosed. Defaults to double quote.
	QuoteChar *string `pulumi:"quoteChar"`
	// A single character that is the column separator.
	Separator *string `pulumi:"separator"`
}

// GcsCollectionSourceCsvInput is an input type that accepts GcsCollectionSourceCsvArgs and GcsCollectionSourceCsvOutput values.
// You can construct a concrete instance of `GcsCollectionSourceCsvInput` via:
//
//	GcsCollectionSourceCsvArgs{...}
type GcsCollectionSourceCsvInput interface {
	pulumi.Input

	ToGcsCollectionSourceCsvOutput() GcsCollectionSourceCsvOutput
	ToGcsCollectionSourceCsvOutputWithContext(context.Context) GcsCollectionSourceCsvOutput
}

type GcsCollectionSourceCsvArgs struct {
	// The names of the columns.
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	// The types of the columns.
	ColumnTypes pulumi.StringArrayInput `pulumi:"columnTypes"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
	EscapeChar pulumi.StringPtrInput `pulumi:"escapeChar"`
	// If the first line in every object specifies the column names.
	FirstLineAsColumnNames pulumi.BoolPtrInput `pulumi:"firstLineAsColumnNames"`
	// Character within which a cell value is enclosed. Defaults to double quote.
	QuoteChar pulumi.StringPtrInput `pulumi:"quoteChar"`
	// A single character that is the column separator.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
}

func (GcsCollectionSourceCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSourceCsv)(nil)).Elem()
}

func (i GcsCollectionSourceCsvArgs) ToGcsCollectionSourceCsvOutput() GcsCollectionSourceCsvOutput {
	return i.ToGcsCollectionSourceCsvOutputWithContext(context.Background())
}

func (i GcsCollectionSourceCsvArgs) ToGcsCollectionSourceCsvOutputWithContext(ctx context.Context) GcsCollectionSourceCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceCsvOutput)
}

func (i GcsCollectionSourceCsvArgs) ToGcsCollectionSourceCsvPtrOutput() GcsCollectionSourceCsvPtrOutput {
	return i.ToGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i GcsCollectionSourceCsvArgs) ToGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) GcsCollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceCsvOutput).ToGcsCollectionSourceCsvPtrOutputWithContext(ctx)
}

// GcsCollectionSourceCsvPtrInput is an input type that accepts GcsCollectionSourceCsvArgs, GcsCollectionSourceCsvPtr and GcsCollectionSourceCsvPtrOutput values.
// You can construct a concrete instance of `GcsCollectionSourceCsvPtrInput` via:
//
//	        GcsCollectionSourceCsvArgs{...}
//
//	or:
//
//	        nil
type GcsCollectionSourceCsvPtrInput interface {
	pulumi.Input

	ToGcsCollectionSourceCsvPtrOutput() GcsCollectionSourceCsvPtrOutput
	ToGcsCollectionSourceCsvPtrOutputWithContext(context.Context) GcsCollectionSourceCsvPtrOutput
}

type gcsCollectionSourceCsvPtrType GcsCollectionSourceCsvArgs

func GcsCollectionSourceCsvPtr(v *GcsCollectionSourceCsvArgs) GcsCollectionSourceCsvPtrInput {
	return (*gcsCollectionSourceCsvPtrType)(v)
}

func (*gcsCollectionSourceCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsCollectionSourceCsv)(nil)).Elem()
}

func (i *gcsCollectionSourceCsvPtrType) ToGcsCollectionSourceCsvPtrOutput() GcsCollectionSourceCsvPtrOutput {
	return i.ToGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i *gcsCollectionSourceCsvPtrType) ToGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) GcsCollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceCsvPtrOutput)
}

type GcsCollectionSourceCsvOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSourceCsv)(nil)).Elem()
}

func (o GcsCollectionSourceCsvOutput) ToGcsCollectionSourceCsvOutput() GcsCollectionSourceCsvOutput {
	return o
}

func (o GcsCollectionSourceCsvOutput) ToGcsCollectionSourceCsvOutputWithContext(ctx context.Context) GcsCollectionSourceCsvOutput {
	return o
}

func (o GcsCollectionSourceCsvOutput) ToGcsCollectionSourceCsvPtrOutput() GcsCollectionSourceCsvPtrOutput {
	return o.ToGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (o GcsCollectionSourceCsvOutput) ToGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) GcsCollectionSourceCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsCollectionSourceCsv) *GcsCollectionSourceCsv {
		return &v
	}).(GcsCollectionSourceCsvPtrOutput)
}

// The names of the columns.
func (o GcsCollectionSourceCsvOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

// The types of the columns.
func (o GcsCollectionSourceCsvOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) []string { return v.ColumnTypes }).(pulumi.StringArrayOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o GcsCollectionSourceCsvOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
func (o GcsCollectionSourceCsvOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) *string { return v.EscapeChar }).(pulumi.StringPtrOutput)
}

// If the first line in every object specifies the column names.
func (o GcsCollectionSourceCsvOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) *bool { return v.FirstLineAsColumnNames }).(pulumi.BoolPtrOutput)
}

// Character within which a cell value is enclosed. Defaults to double quote.
func (o GcsCollectionSourceCsvOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) *string { return v.QuoteChar }).(pulumi.StringPtrOutput)
}

// A single character that is the column separator.
func (o GcsCollectionSourceCsvOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceCsv) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

type GcsCollectionSourceCsvPtrOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsCollectionSourceCsv)(nil)).Elem()
}

func (o GcsCollectionSourceCsvPtrOutput) ToGcsCollectionSourceCsvPtrOutput() GcsCollectionSourceCsvPtrOutput {
	return o
}

func (o GcsCollectionSourceCsvPtrOutput) ToGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) GcsCollectionSourceCsvPtrOutput {
	return o
}

func (o GcsCollectionSourceCsvPtrOutput) Elem() GcsCollectionSourceCsvOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) GcsCollectionSourceCsv {
		if v != nil {
			return *v
		}
		var ret GcsCollectionSourceCsv
		return ret
	}).(GcsCollectionSourceCsvOutput)
}

// The names of the columns.
func (o GcsCollectionSourceCsvPtrOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(pulumi.StringArrayOutput)
}

// The types of the columns.
func (o GcsCollectionSourceCsvPtrOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnTypes
	}).(pulumi.StringArrayOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o GcsCollectionSourceCsvPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
func (o GcsCollectionSourceCsvPtrOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.StringPtrOutput)
}

// If the first line in every object specifies the column names.
func (o GcsCollectionSourceCsvPtrOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) *bool {
		if v == nil {
			return nil
		}
		return v.FirstLineAsColumnNames
	}).(pulumi.BoolPtrOutput)
}

// Character within which a cell value is enclosed. Defaults to double quote.
func (o GcsCollectionSourceCsvPtrOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.StringPtrOutput)
}

// A single character that is the column separator.
func (o GcsCollectionSourceCsvPtrOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Separator
	}).(pulumi.StringPtrOutput)
}

type GcsCollectionSourceXml struct {
	// Tag to differentiate between attributes and elements.
	AttributePrefix *string `pulumi:"attributePrefix"`
	// Tags with which documents are identified
	DocTag *string `pulumi:"docTag"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding *string `pulumi:"encoding"`
	// Tag until which xml is ignored.
	RootTag *string `pulumi:"rootTag"`
	// Tag used for the value when there are attributes in the element having no child.
	ValueTag *string `pulumi:"valueTag"`
}

// GcsCollectionSourceXmlInput is an input type that accepts GcsCollectionSourceXmlArgs and GcsCollectionSourceXmlOutput values.
// You can construct a concrete instance of `GcsCollectionSourceXmlInput` via:
//
//	GcsCollectionSourceXmlArgs{...}
type GcsCollectionSourceXmlInput interface {
	pulumi.Input

	ToGcsCollectionSourceXmlOutput() GcsCollectionSourceXmlOutput
	ToGcsCollectionSourceXmlOutputWithContext(context.Context) GcsCollectionSourceXmlOutput
}

type GcsCollectionSourceXmlArgs struct {
	// Tag to differentiate between attributes and elements.
	AttributePrefix pulumi.StringPtrInput `pulumi:"attributePrefix"`
	// Tags with which documents are identified
	DocTag pulumi.StringPtrInput `pulumi:"docTag"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Tag until which xml is ignored.
	RootTag pulumi.StringPtrInput `pulumi:"rootTag"`
	// Tag used for the value when there are attributes in the element having no child.
	ValueTag pulumi.StringPtrInput `pulumi:"valueTag"`
}

func (GcsCollectionSourceXmlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSourceXml)(nil)).Elem()
}

func (i GcsCollectionSourceXmlArgs) ToGcsCollectionSourceXmlOutput() GcsCollectionSourceXmlOutput {
	return i.ToGcsCollectionSourceXmlOutputWithContext(context.Background())
}

func (i GcsCollectionSourceXmlArgs) ToGcsCollectionSourceXmlOutputWithContext(ctx context.Context) GcsCollectionSourceXmlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceXmlOutput)
}

func (i GcsCollectionSourceXmlArgs) ToGcsCollectionSourceXmlPtrOutput() GcsCollectionSourceXmlPtrOutput {
	return i.ToGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i GcsCollectionSourceXmlArgs) ToGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) GcsCollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceXmlOutput).ToGcsCollectionSourceXmlPtrOutputWithContext(ctx)
}

// GcsCollectionSourceXmlPtrInput is an input type that accepts GcsCollectionSourceXmlArgs, GcsCollectionSourceXmlPtr and GcsCollectionSourceXmlPtrOutput values.
// You can construct a concrete instance of `GcsCollectionSourceXmlPtrInput` via:
//
//	        GcsCollectionSourceXmlArgs{...}
//
//	or:
//
//	        nil
type GcsCollectionSourceXmlPtrInput interface {
	pulumi.Input

	ToGcsCollectionSourceXmlPtrOutput() GcsCollectionSourceXmlPtrOutput
	ToGcsCollectionSourceXmlPtrOutputWithContext(context.Context) GcsCollectionSourceXmlPtrOutput
}

type gcsCollectionSourceXmlPtrType GcsCollectionSourceXmlArgs

func GcsCollectionSourceXmlPtr(v *GcsCollectionSourceXmlArgs) GcsCollectionSourceXmlPtrInput {
	return (*gcsCollectionSourceXmlPtrType)(v)
}

func (*gcsCollectionSourceXmlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsCollectionSourceXml)(nil)).Elem()
}

func (i *gcsCollectionSourceXmlPtrType) ToGcsCollectionSourceXmlPtrOutput() GcsCollectionSourceXmlPtrOutput {
	return i.ToGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i *gcsCollectionSourceXmlPtrType) ToGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) GcsCollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsCollectionSourceXmlPtrOutput)
}

type GcsCollectionSourceXmlOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceXmlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsCollectionSourceXml)(nil)).Elem()
}

func (o GcsCollectionSourceXmlOutput) ToGcsCollectionSourceXmlOutput() GcsCollectionSourceXmlOutput {
	return o
}

func (o GcsCollectionSourceXmlOutput) ToGcsCollectionSourceXmlOutputWithContext(ctx context.Context) GcsCollectionSourceXmlOutput {
	return o
}

func (o GcsCollectionSourceXmlOutput) ToGcsCollectionSourceXmlPtrOutput() GcsCollectionSourceXmlPtrOutput {
	return o.ToGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (o GcsCollectionSourceXmlOutput) ToGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) GcsCollectionSourceXmlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsCollectionSourceXml) *GcsCollectionSourceXml {
		return &v
	}).(GcsCollectionSourceXmlPtrOutput)
}

// Tag to differentiate between attributes and elements.
func (o GcsCollectionSourceXmlOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceXml) *string { return v.AttributePrefix }).(pulumi.StringPtrOutput)
}

// Tags with which documents are identified
func (o GcsCollectionSourceXmlOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceXml) *string { return v.DocTag }).(pulumi.StringPtrOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o GcsCollectionSourceXmlOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceXml) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Tag until which xml is ignored.
func (o GcsCollectionSourceXmlOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceXml) *string { return v.RootTag }).(pulumi.StringPtrOutput)
}

// Tag used for the value when there are attributes in the element having no child.
func (o GcsCollectionSourceXmlOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsCollectionSourceXml) *string { return v.ValueTag }).(pulumi.StringPtrOutput)
}

type GcsCollectionSourceXmlPtrOutput struct{ *pulumi.OutputState }

func (GcsCollectionSourceXmlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsCollectionSourceXml)(nil)).Elem()
}

func (o GcsCollectionSourceXmlPtrOutput) ToGcsCollectionSourceXmlPtrOutput() GcsCollectionSourceXmlPtrOutput {
	return o
}

func (o GcsCollectionSourceXmlPtrOutput) ToGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) GcsCollectionSourceXmlPtrOutput {
	return o
}

func (o GcsCollectionSourceXmlPtrOutput) Elem() GcsCollectionSourceXmlOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) GcsCollectionSourceXml {
		if v != nil {
			return *v
		}
		var ret GcsCollectionSourceXml
		return ret
	}).(GcsCollectionSourceXmlOutput)
}

// Tag to differentiate between attributes and elements.
func (o GcsCollectionSourceXmlPtrOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.AttributePrefix
	}).(pulumi.StringPtrOutput)
}

// Tags with which documents are identified
func (o GcsCollectionSourceXmlPtrOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.DocTag
	}).(pulumi.StringPtrOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o GcsCollectionSourceXmlPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Tag until which xml is ignored.
func (o GcsCollectionSourceXmlPtrOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.RootTag
	}).(pulumi.StringPtrOutput)
}

// Tag used for the value when there are attributes in the element having no child.
func (o GcsCollectionSourceXmlPtrOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.ValueTag
	}).(pulumi.StringPtrOutput)
}

type KafkaCollectionSource struct {
	// The Kafka consumer group Id being used.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The name of the Rockset Kafka integration.
	IntegrationName string `pulumi:"integrationName"`
	// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
	OffsetResetPolicy *string                       `pulumi:"offsetResetPolicy"`
	Statuses          []KafkaCollectionSourceStatus `pulumi:"statuses"`
	// Name of Kafka topic to be tailed.
	TopicName string `pulumi:"topicName"`
	// Whether to use v3 integration. Required if the kafka integration uses v3.
	UseV3 *bool `pulumi:"useV3"`
}

// KafkaCollectionSourceInput is an input type that accepts KafkaCollectionSourceArgs and KafkaCollectionSourceOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceInput` via:
//
//	KafkaCollectionSourceArgs{...}
type KafkaCollectionSourceInput interface {
	pulumi.Input

	ToKafkaCollectionSourceOutput() KafkaCollectionSourceOutput
	ToKafkaCollectionSourceOutputWithContext(context.Context) KafkaCollectionSourceOutput
}

type KafkaCollectionSourceArgs struct {
	// The Kafka consumer group Id being used.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
	// The name of the Rockset Kafka integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
	OffsetResetPolicy pulumi.StringPtrInput                 `pulumi:"offsetResetPolicy"`
	Statuses          KafkaCollectionSourceStatusArrayInput `pulumi:"statuses"`
	// Name of Kafka topic to be tailed.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// Whether to use v3 integration. Required if the kafka integration uses v3.
	UseV3 pulumi.BoolPtrInput `pulumi:"useV3"`
}

func (KafkaCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSource)(nil)).Elem()
}

func (i KafkaCollectionSourceArgs) ToKafkaCollectionSourceOutput() KafkaCollectionSourceOutput {
	return i.ToKafkaCollectionSourceOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceArgs) ToKafkaCollectionSourceOutputWithContext(ctx context.Context) KafkaCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceOutput)
}

// KafkaCollectionSourceArrayInput is an input type that accepts KafkaCollectionSourceArray and KafkaCollectionSourceArrayOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceArrayInput` via:
//
//	KafkaCollectionSourceArray{ KafkaCollectionSourceArgs{...} }
type KafkaCollectionSourceArrayInput interface {
	pulumi.Input

	ToKafkaCollectionSourceArrayOutput() KafkaCollectionSourceArrayOutput
	ToKafkaCollectionSourceArrayOutputWithContext(context.Context) KafkaCollectionSourceArrayOutput
}

type KafkaCollectionSourceArray []KafkaCollectionSourceInput

func (KafkaCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSource)(nil)).Elem()
}

func (i KafkaCollectionSourceArray) ToKafkaCollectionSourceArrayOutput() KafkaCollectionSourceArrayOutput {
	return i.ToKafkaCollectionSourceArrayOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceArray) ToKafkaCollectionSourceArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceArrayOutput)
}

type KafkaCollectionSourceOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSource)(nil)).Elem()
}

func (o KafkaCollectionSourceOutput) ToKafkaCollectionSourceOutput() KafkaCollectionSourceOutput {
	return o
}

func (o KafkaCollectionSourceOutput) ToKafkaCollectionSourceOutputWithContext(ctx context.Context) KafkaCollectionSourceOutput {
	return o
}

// The Kafka consumer group Id being used.
func (o KafkaCollectionSourceOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSource) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The name of the Rockset Kafka integration.
func (o KafkaCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
func (o KafkaCollectionSourceOutput) OffsetResetPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSource) *string { return v.OffsetResetPolicy }).(pulumi.StringPtrOutput)
}

func (o KafkaCollectionSourceOutput) Statuses() KafkaCollectionSourceStatusArrayOutput {
	return o.ApplyT(func(v KafkaCollectionSource) []KafkaCollectionSourceStatus { return v.Statuses }).(KafkaCollectionSourceStatusArrayOutput)
}

// Name of Kafka topic to be tailed.
func (o KafkaCollectionSourceOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaCollectionSource) string { return v.TopicName }).(pulumi.StringOutput)
}

// Whether to use v3 integration. Required if the kafka integration uses v3.
func (o KafkaCollectionSourceOutput) UseV3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSource) *bool { return v.UseV3 }).(pulumi.BoolPtrOutput)
}

type KafkaCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSource)(nil)).Elem()
}

func (o KafkaCollectionSourceArrayOutput) ToKafkaCollectionSourceArrayOutput() KafkaCollectionSourceArrayOutput {
	return o
}

func (o KafkaCollectionSourceArrayOutput) ToKafkaCollectionSourceArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceArrayOutput {
	return o
}

func (o KafkaCollectionSourceArrayOutput) Index(i pulumi.IntInput) KafkaCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaCollectionSource {
		return vs[0].([]KafkaCollectionSource)[vs[1].(int)]
	}).(KafkaCollectionSourceOutput)
}

type KafkaCollectionSourceStatus struct {
	DocumentsProcessed *int                                   `pulumi:"documentsProcessed"`
	LastConsumedTime   *string                                `pulumi:"lastConsumedTime"`
	Partitions         []KafkaCollectionSourceStatusPartition `pulumi:"partitions"`
	State              *string                                `pulumi:"state"`
}

// KafkaCollectionSourceStatusInput is an input type that accepts KafkaCollectionSourceStatusArgs and KafkaCollectionSourceStatusOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceStatusInput` via:
//
//	KafkaCollectionSourceStatusArgs{...}
type KafkaCollectionSourceStatusInput interface {
	pulumi.Input

	ToKafkaCollectionSourceStatusOutput() KafkaCollectionSourceStatusOutput
	ToKafkaCollectionSourceStatusOutputWithContext(context.Context) KafkaCollectionSourceStatusOutput
}

type KafkaCollectionSourceStatusArgs struct {
	DocumentsProcessed pulumi.IntPtrInput                             `pulumi:"documentsProcessed"`
	LastConsumedTime   pulumi.StringPtrInput                          `pulumi:"lastConsumedTime"`
	Partitions         KafkaCollectionSourceStatusPartitionArrayInput `pulumi:"partitions"`
	State              pulumi.StringPtrInput                          `pulumi:"state"`
}

func (KafkaCollectionSourceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSourceStatus)(nil)).Elem()
}

func (i KafkaCollectionSourceStatusArgs) ToKafkaCollectionSourceStatusOutput() KafkaCollectionSourceStatusOutput {
	return i.ToKafkaCollectionSourceStatusOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceStatusArgs) ToKafkaCollectionSourceStatusOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceStatusOutput)
}

// KafkaCollectionSourceStatusArrayInput is an input type that accepts KafkaCollectionSourceStatusArray and KafkaCollectionSourceStatusArrayOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceStatusArrayInput` via:
//
//	KafkaCollectionSourceStatusArray{ KafkaCollectionSourceStatusArgs{...} }
type KafkaCollectionSourceStatusArrayInput interface {
	pulumi.Input

	ToKafkaCollectionSourceStatusArrayOutput() KafkaCollectionSourceStatusArrayOutput
	ToKafkaCollectionSourceStatusArrayOutputWithContext(context.Context) KafkaCollectionSourceStatusArrayOutput
}

type KafkaCollectionSourceStatusArray []KafkaCollectionSourceStatusInput

func (KafkaCollectionSourceStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSourceStatus)(nil)).Elem()
}

func (i KafkaCollectionSourceStatusArray) ToKafkaCollectionSourceStatusArrayOutput() KafkaCollectionSourceStatusArrayOutput {
	return i.ToKafkaCollectionSourceStatusArrayOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceStatusArray) ToKafkaCollectionSourceStatusArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceStatusArrayOutput)
}

type KafkaCollectionSourceStatusOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSourceStatus)(nil)).Elem()
}

func (o KafkaCollectionSourceStatusOutput) ToKafkaCollectionSourceStatusOutput() KafkaCollectionSourceStatusOutput {
	return o
}

func (o KafkaCollectionSourceStatusOutput) ToKafkaCollectionSourceStatusOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusOutput {
	return o
}

func (o KafkaCollectionSourceStatusOutput) DocumentsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatus) *int { return v.DocumentsProcessed }).(pulumi.IntPtrOutput)
}

func (o KafkaCollectionSourceStatusOutput) LastConsumedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatus) *string { return v.LastConsumedTime }).(pulumi.StringPtrOutput)
}

func (o KafkaCollectionSourceStatusOutput) Partitions() KafkaCollectionSourceStatusPartitionArrayOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatus) []KafkaCollectionSourceStatusPartition { return v.Partitions }).(KafkaCollectionSourceStatusPartitionArrayOutput)
}

func (o KafkaCollectionSourceStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type KafkaCollectionSourceStatusArrayOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSourceStatus)(nil)).Elem()
}

func (o KafkaCollectionSourceStatusArrayOutput) ToKafkaCollectionSourceStatusArrayOutput() KafkaCollectionSourceStatusArrayOutput {
	return o
}

func (o KafkaCollectionSourceStatusArrayOutput) ToKafkaCollectionSourceStatusArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusArrayOutput {
	return o
}

func (o KafkaCollectionSourceStatusArrayOutput) Index(i pulumi.IntInput) KafkaCollectionSourceStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaCollectionSourceStatus {
		return vs[0].([]KafkaCollectionSourceStatus)[vs[1].(int)]
	}).(KafkaCollectionSourceStatusOutput)
}

type KafkaCollectionSourceStatusPartition struct {
	OffsetLag       *int `pulumi:"offsetLag"`
	PartitionNumber *int `pulumi:"partitionNumber"`
	PartitionOffset *int `pulumi:"partitionOffset"`
}

// KafkaCollectionSourceStatusPartitionInput is an input type that accepts KafkaCollectionSourceStatusPartitionArgs and KafkaCollectionSourceStatusPartitionOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceStatusPartitionInput` via:
//
//	KafkaCollectionSourceStatusPartitionArgs{...}
type KafkaCollectionSourceStatusPartitionInput interface {
	pulumi.Input

	ToKafkaCollectionSourceStatusPartitionOutput() KafkaCollectionSourceStatusPartitionOutput
	ToKafkaCollectionSourceStatusPartitionOutputWithContext(context.Context) KafkaCollectionSourceStatusPartitionOutput
}

type KafkaCollectionSourceStatusPartitionArgs struct {
	OffsetLag       pulumi.IntPtrInput `pulumi:"offsetLag"`
	PartitionNumber pulumi.IntPtrInput `pulumi:"partitionNumber"`
	PartitionOffset pulumi.IntPtrInput `pulumi:"partitionOffset"`
}

func (KafkaCollectionSourceStatusPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (i KafkaCollectionSourceStatusPartitionArgs) ToKafkaCollectionSourceStatusPartitionOutput() KafkaCollectionSourceStatusPartitionOutput {
	return i.ToKafkaCollectionSourceStatusPartitionOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceStatusPartitionArgs) ToKafkaCollectionSourceStatusPartitionOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceStatusPartitionOutput)
}

// KafkaCollectionSourceStatusPartitionArrayInput is an input type that accepts KafkaCollectionSourceStatusPartitionArray and KafkaCollectionSourceStatusPartitionArrayOutput values.
// You can construct a concrete instance of `KafkaCollectionSourceStatusPartitionArrayInput` via:
//
//	KafkaCollectionSourceStatusPartitionArray{ KafkaCollectionSourceStatusPartitionArgs{...} }
type KafkaCollectionSourceStatusPartitionArrayInput interface {
	pulumi.Input

	ToKafkaCollectionSourceStatusPartitionArrayOutput() KafkaCollectionSourceStatusPartitionArrayOutput
	ToKafkaCollectionSourceStatusPartitionArrayOutputWithContext(context.Context) KafkaCollectionSourceStatusPartitionArrayOutput
}

type KafkaCollectionSourceStatusPartitionArray []KafkaCollectionSourceStatusPartitionInput

func (KafkaCollectionSourceStatusPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (i KafkaCollectionSourceStatusPartitionArray) ToKafkaCollectionSourceStatusPartitionArrayOutput() KafkaCollectionSourceStatusPartitionArrayOutput {
	return i.ToKafkaCollectionSourceStatusPartitionArrayOutputWithContext(context.Background())
}

func (i KafkaCollectionSourceStatusPartitionArray) ToKafkaCollectionSourceStatusPartitionArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaCollectionSourceStatusPartitionArrayOutput)
}

type KafkaCollectionSourceStatusPartitionOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceStatusPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (o KafkaCollectionSourceStatusPartitionOutput) ToKafkaCollectionSourceStatusPartitionOutput() KafkaCollectionSourceStatusPartitionOutput {
	return o
}

func (o KafkaCollectionSourceStatusPartitionOutput) ToKafkaCollectionSourceStatusPartitionOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusPartitionOutput {
	return o
}

func (o KafkaCollectionSourceStatusPartitionOutput) OffsetLag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatusPartition) *int { return v.OffsetLag }).(pulumi.IntPtrOutput)
}

func (o KafkaCollectionSourceStatusPartitionOutput) PartitionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatusPartition) *int { return v.PartitionNumber }).(pulumi.IntPtrOutput)
}

func (o KafkaCollectionSourceStatusPartitionOutput) PartitionOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaCollectionSourceStatusPartition) *int { return v.PartitionOffset }).(pulumi.IntPtrOutput)
}

type KafkaCollectionSourceStatusPartitionArrayOutput struct{ *pulumi.OutputState }

func (KafkaCollectionSourceStatusPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (o KafkaCollectionSourceStatusPartitionArrayOutput) ToKafkaCollectionSourceStatusPartitionArrayOutput() KafkaCollectionSourceStatusPartitionArrayOutput {
	return o
}

func (o KafkaCollectionSourceStatusPartitionArrayOutput) ToKafkaCollectionSourceStatusPartitionArrayOutputWithContext(ctx context.Context) KafkaCollectionSourceStatusPartitionArrayOutput {
	return o
}

func (o KafkaCollectionSourceStatusPartitionArrayOutput) Index(i pulumi.IntInput) KafkaCollectionSourceStatusPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaCollectionSourceStatusPartition {
		return vs[0].([]KafkaCollectionSourceStatusPartition)[vs[1].(int)]
	}).(KafkaCollectionSourceStatusPartitionOutput)
}

type KinesisCollectionSource struct {
	// AWS region name for the Kinesis stream, by default us-west-2 is used
	AwsRegion *string `pulumi:"awsRegion"`
	// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
	DmsPrimaryKeys []string `pulumi:"dmsPrimaryKeys"`
	// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
	Format string `pulumi:"format"`
	// The name of the Rockset Kinesis integration.
	IntegrationName string `pulumi:"integrationName"`
	// Name of Kinesis stream.
	StreamName string `pulumi:"streamName"`
}

// KinesisCollectionSourceInput is an input type that accepts KinesisCollectionSourceArgs and KinesisCollectionSourceOutput values.
// You can construct a concrete instance of `KinesisCollectionSourceInput` via:
//
//	KinesisCollectionSourceArgs{...}
type KinesisCollectionSourceInput interface {
	pulumi.Input

	ToKinesisCollectionSourceOutput() KinesisCollectionSourceOutput
	ToKinesisCollectionSourceOutputWithContext(context.Context) KinesisCollectionSourceOutput
}

type KinesisCollectionSourceArgs struct {
	// AWS region name for the Kinesis stream, by default us-west-2 is used
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
	DmsPrimaryKeys pulumi.StringArrayInput `pulumi:"dmsPrimaryKeys"`
	// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset Kinesis integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Name of Kinesis stream.
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (KinesisCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisCollectionSource)(nil)).Elem()
}

func (i KinesisCollectionSourceArgs) ToKinesisCollectionSourceOutput() KinesisCollectionSourceOutput {
	return i.ToKinesisCollectionSourceOutputWithContext(context.Background())
}

func (i KinesisCollectionSourceArgs) ToKinesisCollectionSourceOutputWithContext(ctx context.Context) KinesisCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisCollectionSourceOutput)
}

// KinesisCollectionSourceArrayInput is an input type that accepts KinesisCollectionSourceArray and KinesisCollectionSourceArrayOutput values.
// You can construct a concrete instance of `KinesisCollectionSourceArrayInput` via:
//
//	KinesisCollectionSourceArray{ KinesisCollectionSourceArgs{...} }
type KinesisCollectionSourceArrayInput interface {
	pulumi.Input

	ToKinesisCollectionSourceArrayOutput() KinesisCollectionSourceArrayOutput
	ToKinesisCollectionSourceArrayOutputWithContext(context.Context) KinesisCollectionSourceArrayOutput
}

type KinesisCollectionSourceArray []KinesisCollectionSourceInput

func (KinesisCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisCollectionSource)(nil)).Elem()
}

func (i KinesisCollectionSourceArray) ToKinesisCollectionSourceArrayOutput() KinesisCollectionSourceArrayOutput {
	return i.ToKinesisCollectionSourceArrayOutputWithContext(context.Background())
}

func (i KinesisCollectionSourceArray) ToKinesisCollectionSourceArrayOutputWithContext(ctx context.Context) KinesisCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisCollectionSourceArrayOutput)
}

type KinesisCollectionSourceOutput struct{ *pulumi.OutputState }

func (KinesisCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisCollectionSource)(nil)).Elem()
}

func (o KinesisCollectionSourceOutput) ToKinesisCollectionSourceOutput() KinesisCollectionSourceOutput {
	return o
}

func (o KinesisCollectionSourceOutput) ToKinesisCollectionSourceOutputWithContext(ctx context.Context) KinesisCollectionSourceOutput {
	return o
}

// AWS region name for the Kinesis stream, by default us-west-2 is used
func (o KinesisCollectionSourceOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisCollectionSource) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
func (o KinesisCollectionSourceOutput) DmsPrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KinesisCollectionSource) []string { return v.DmsPrimaryKeys }).(pulumi.StringArrayOutput)
}

// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
func (o KinesisCollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisCollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset Kinesis integration.
func (o KinesisCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Name of Kinesis stream.
func (o KinesisCollectionSourceOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisCollectionSource) string { return v.StreamName }).(pulumi.StringOutput)
}

type KinesisCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (KinesisCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisCollectionSource)(nil)).Elem()
}

func (o KinesisCollectionSourceArrayOutput) ToKinesisCollectionSourceArrayOutput() KinesisCollectionSourceArrayOutput {
	return o
}

func (o KinesisCollectionSourceArrayOutput) ToKinesisCollectionSourceArrayOutputWithContext(ctx context.Context) KinesisCollectionSourceArrayOutput {
	return o
}

func (o KinesisCollectionSourceArrayOutput) Index(i pulumi.IntInput) KinesisCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KinesisCollectionSource {
		return vs[0].([]KinesisCollectionSource)[vs[1].(int)]
	}).(KinesisCollectionSourceOutput)
}

type MongodbCollectionSource struct {
	// MongoDB collection name of the target collection.
	CollectionName string `pulumi:"collectionName"`
	// MongoDB database name containing the target collection.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the Rockset MongoDB integration.
	IntegrationName      string `pulumi:"integrationName"`
	RetrieveFullDocument *bool  `pulumi:"retrieveFullDocument"`
	// MongoDB scan end time.
	ScanEndTime *string `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed *int `pulumi:"scanRecordsProcessed"`
	// MongoDB scan start time.
	ScanStartTime *string `pulumi:"scanStartTime"`
	// Number of records in MongoDB table at time of scan.
	ScanTotalRecords *int `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State *string `pulumi:"state"`
	// ISO-8601 date when delete from source was last processed.
	StreamLastDeleteProcessedAt *string `pulumi:"streamLastDeleteProcessedAt"`
	// ISO-8601 date when new insert from source was last processed.
	StreamLastInsertProcessedAt *string `pulumi:"streamLastInsertProcessedAt"`
	// ISO-8601 date when update from source was last processed.
	StreamLastUpdateProcessedAt *string `pulumi:"streamLastUpdateProcessedAt"`
	// Number of new records deleted using stream.
	StreamRecordsDeleted *int `pulumi:"streamRecordsDeleted"`
	// Number of new records inserted using stream.
	StreamRecordsInserted *int `pulumi:"streamRecordsInserted"`
	// Number of new records updated using stream.
	StreamRecordsUpdated *int `pulumi:"streamRecordsUpdated"`
}

// MongodbCollectionSourceInput is an input type that accepts MongodbCollectionSourceArgs and MongodbCollectionSourceOutput values.
// You can construct a concrete instance of `MongodbCollectionSourceInput` via:
//
//	MongodbCollectionSourceArgs{...}
type MongodbCollectionSourceInput interface {
	pulumi.Input

	ToMongodbCollectionSourceOutput() MongodbCollectionSourceOutput
	ToMongodbCollectionSourceOutputWithContext(context.Context) MongodbCollectionSourceOutput
}

type MongodbCollectionSourceArgs struct {
	// MongoDB collection name of the target collection.
	CollectionName pulumi.StringInput `pulumi:"collectionName"`
	// MongoDB database name containing the target collection.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the Rockset MongoDB integration.
	IntegrationName      pulumi.StringInput  `pulumi:"integrationName"`
	RetrieveFullDocument pulumi.BoolPtrInput `pulumi:"retrieveFullDocument"`
	// MongoDB scan end time.
	ScanEndTime pulumi.StringPtrInput `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed pulumi.IntPtrInput `pulumi:"scanRecordsProcessed"`
	// MongoDB scan start time.
	ScanStartTime pulumi.StringPtrInput `pulumi:"scanStartTime"`
	// Number of records in MongoDB table at time of scan.
	ScanTotalRecords pulumi.IntPtrInput `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State pulumi.StringPtrInput `pulumi:"state"`
	// ISO-8601 date when delete from source was last processed.
	StreamLastDeleteProcessedAt pulumi.StringPtrInput `pulumi:"streamLastDeleteProcessedAt"`
	// ISO-8601 date when new insert from source was last processed.
	StreamLastInsertProcessedAt pulumi.StringPtrInput `pulumi:"streamLastInsertProcessedAt"`
	// ISO-8601 date when update from source was last processed.
	StreamLastUpdateProcessedAt pulumi.StringPtrInput `pulumi:"streamLastUpdateProcessedAt"`
	// Number of new records deleted using stream.
	StreamRecordsDeleted pulumi.IntPtrInput `pulumi:"streamRecordsDeleted"`
	// Number of new records inserted using stream.
	StreamRecordsInserted pulumi.IntPtrInput `pulumi:"streamRecordsInserted"`
	// Number of new records updated using stream.
	StreamRecordsUpdated pulumi.IntPtrInput `pulumi:"streamRecordsUpdated"`
}

func (MongodbCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbCollectionSource)(nil)).Elem()
}

func (i MongodbCollectionSourceArgs) ToMongodbCollectionSourceOutput() MongodbCollectionSourceOutput {
	return i.ToMongodbCollectionSourceOutputWithContext(context.Background())
}

func (i MongodbCollectionSourceArgs) ToMongodbCollectionSourceOutputWithContext(ctx context.Context) MongodbCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbCollectionSourceOutput)
}

// MongodbCollectionSourceArrayInput is an input type that accepts MongodbCollectionSourceArray and MongodbCollectionSourceArrayOutput values.
// You can construct a concrete instance of `MongodbCollectionSourceArrayInput` via:
//
//	MongodbCollectionSourceArray{ MongodbCollectionSourceArgs{...} }
type MongodbCollectionSourceArrayInput interface {
	pulumi.Input

	ToMongodbCollectionSourceArrayOutput() MongodbCollectionSourceArrayOutput
	ToMongodbCollectionSourceArrayOutputWithContext(context.Context) MongodbCollectionSourceArrayOutput
}

type MongodbCollectionSourceArray []MongodbCollectionSourceInput

func (MongodbCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongodbCollectionSource)(nil)).Elem()
}

func (i MongodbCollectionSourceArray) ToMongodbCollectionSourceArrayOutput() MongodbCollectionSourceArrayOutput {
	return i.ToMongodbCollectionSourceArrayOutputWithContext(context.Background())
}

func (i MongodbCollectionSourceArray) ToMongodbCollectionSourceArrayOutputWithContext(ctx context.Context) MongodbCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbCollectionSourceArrayOutput)
}

type MongodbCollectionSourceOutput struct{ *pulumi.OutputState }

func (MongodbCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongodbCollectionSource)(nil)).Elem()
}

func (o MongodbCollectionSourceOutput) ToMongodbCollectionSourceOutput() MongodbCollectionSourceOutput {
	return o
}

func (o MongodbCollectionSourceOutput) ToMongodbCollectionSourceOutputWithContext(ctx context.Context) MongodbCollectionSourceOutput {
	return o
}

// MongoDB collection name of the target collection.
func (o MongodbCollectionSourceOutput) CollectionName() pulumi.StringOutput {
	return o.ApplyT(func(v MongodbCollectionSource) string { return v.CollectionName }).(pulumi.StringOutput)
}

// MongoDB database name containing the target collection.
func (o MongodbCollectionSourceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MongodbCollectionSource) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The name of the Rockset MongoDB integration.
func (o MongodbCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v MongodbCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

func (o MongodbCollectionSourceOutput) RetrieveFullDocument() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *bool { return v.RetrieveFullDocument }).(pulumi.BoolPtrOutput)
}

// MongoDB scan end time.
func (o MongodbCollectionSourceOutput) ScanEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.ScanEndTime }).(pulumi.StringPtrOutput)
}

// Number of records inserted using scan.
func (o MongodbCollectionSourceOutput) ScanRecordsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *int { return v.ScanRecordsProcessed }).(pulumi.IntPtrOutput)
}

// MongoDB scan start time.
func (o MongodbCollectionSourceOutput) ScanStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.ScanStartTime }).(pulumi.StringPtrOutput)
}

// Number of records in MongoDB table at time of scan.
func (o MongodbCollectionSourceOutput) ScanTotalRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *int { return v.ScanTotalRecords }).(pulumi.IntPtrOutput)
}

// State of current ingest for this table.
func (o MongodbCollectionSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.State }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when delete from source was last processed.
func (o MongodbCollectionSourceOutput) StreamLastDeleteProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.StreamLastDeleteProcessedAt }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when new insert from source was last processed.
func (o MongodbCollectionSourceOutput) StreamLastInsertProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.StreamLastInsertProcessedAt }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when update from source was last processed.
func (o MongodbCollectionSourceOutput) StreamLastUpdateProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *string { return v.StreamLastUpdateProcessedAt }).(pulumi.StringPtrOutput)
}

// Number of new records deleted using stream.
func (o MongodbCollectionSourceOutput) StreamRecordsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *int { return v.StreamRecordsDeleted }).(pulumi.IntPtrOutput)
}

// Number of new records inserted using stream.
func (o MongodbCollectionSourceOutput) StreamRecordsInserted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *int { return v.StreamRecordsInserted }).(pulumi.IntPtrOutput)
}

// Number of new records updated using stream.
func (o MongodbCollectionSourceOutput) StreamRecordsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongodbCollectionSource) *int { return v.StreamRecordsUpdated }).(pulumi.IntPtrOutput)
}

type MongodbCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (MongodbCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongodbCollectionSource)(nil)).Elem()
}

func (o MongodbCollectionSourceArrayOutput) ToMongodbCollectionSourceArrayOutput() MongodbCollectionSourceArrayOutput {
	return o
}

func (o MongodbCollectionSourceArrayOutput) ToMongodbCollectionSourceArrayOutputWithContext(ctx context.Context) MongodbCollectionSourceArrayOutput {
	return o
}

func (o MongodbCollectionSourceArrayOutput) Index(i pulumi.IntInput) MongodbCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongodbCollectionSource {
		return vs[0].([]MongodbCollectionSource)[vs[1].(int)]
	}).(MongodbCollectionSourceOutput)
}

type QueryLambdaSql struct {
	DefaultParameters []QueryLambdaSqlDefaultParameter `pulumi:"defaultParameters"`
	Query             string                           `pulumi:"query"`
}

// QueryLambdaSqlInput is an input type that accepts QueryLambdaSqlArgs and QueryLambdaSqlOutput values.
// You can construct a concrete instance of `QueryLambdaSqlInput` via:
//
//	QueryLambdaSqlArgs{...}
type QueryLambdaSqlInput interface {
	pulumi.Input

	ToQueryLambdaSqlOutput() QueryLambdaSqlOutput
	ToQueryLambdaSqlOutputWithContext(context.Context) QueryLambdaSqlOutput
}

type QueryLambdaSqlArgs struct {
	DefaultParameters QueryLambdaSqlDefaultParameterArrayInput `pulumi:"defaultParameters"`
	Query             pulumi.StringInput                       `pulumi:"query"`
}

func (QueryLambdaSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryLambdaSql)(nil)).Elem()
}

func (i QueryLambdaSqlArgs) ToQueryLambdaSqlOutput() QueryLambdaSqlOutput {
	return i.ToQueryLambdaSqlOutputWithContext(context.Background())
}

func (i QueryLambdaSqlArgs) ToQueryLambdaSqlOutputWithContext(ctx context.Context) QueryLambdaSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaSqlOutput)
}

// QueryLambdaSqlArrayInput is an input type that accepts QueryLambdaSqlArray and QueryLambdaSqlArrayOutput values.
// You can construct a concrete instance of `QueryLambdaSqlArrayInput` via:
//
//	QueryLambdaSqlArray{ QueryLambdaSqlArgs{...} }
type QueryLambdaSqlArrayInput interface {
	pulumi.Input

	ToQueryLambdaSqlArrayOutput() QueryLambdaSqlArrayOutput
	ToQueryLambdaSqlArrayOutputWithContext(context.Context) QueryLambdaSqlArrayOutput
}

type QueryLambdaSqlArray []QueryLambdaSqlInput

func (QueryLambdaSqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryLambdaSql)(nil)).Elem()
}

func (i QueryLambdaSqlArray) ToQueryLambdaSqlArrayOutput() QueryLambdaSqlArrayOutput {
	return i.ToQueryLambdaSqlArrayOutputWithContext(context.Background())
}

func (i QueryLambdaSqlArray) ToQueryLambdaSqlArrayOutputWithContext(ctx context.Context) QueryLambdaSqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaSqlArrayOutput)
}

type QueryLambdaSqlOutput struct{ *pulumi.OutputState }

func (QueryLambdaSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryLambdaSql)(nil)).Elem()
}

func (o QueryLambdaSqlOutput) ToQueryLambdaSqlOutput() QueryLambdaSqlOutput {
	return o
}

func (o QueryLambdaSqlOutput) ToQueryLambdaSqlOutputWithContext(ctx context.Context) QueryLambdaSqlOutput {
	return o
}

func (o QueryLambdaSqlOutput) DefaultParameters() QueryLambdaSqlDefaultParameterArrayOutput {
	return o.ApplyT(func(v QueryLambdaSql) []QueryLambdaSqlDefaultParameter { return v.DefaultParameters }).(QueryLambdaSqlDefaultParameterArrayOutput)
}

func (o QueryLambdaSqlOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v QueryLambdaSql) string { return v.Query }).(pulumi.StringOutput)
}

type QueryLambdaSqlArrayOutput struct{ *pulumi.OutputState }

func (QueryLambdaSqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryLambdaSql)(nil)).Elem()
}

func (o QueryLambdaSqlArrayOutput) ToQueryLambdaSqlArrayOutput() QueryLambdaSqlArrayOutput {
	return o
}

func (o QueryLambdaSqlArrayOutput) ToQueryLambdaSqlArrayOutputWithContext(ctx context.Context) QueryLambdaSqlArrayOutput {
	return o
}

func (o QueryLambdaSqlArrayOutput) Index(i pulumi.IntInput) QueryLambdaSqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryLambdaSql {
		return vs[0].([]QueryLambdaSql)[vs[1].(int)]
	}).(QueryLambdaSqlOutput)
}

type QueryLambdaSqlDefaultParameter struct {
	Name  string `pulumi:"name"`
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// QueryLambdaSqlDefaultParameterInput is an input type that accepts QueryLambdaSqlDefaultParameterArgs and QueryLambdaSqlDefaultParameterOutput values.
// You can construct a concrete instance of `QueryLambdaSqlDefaultParameterInput` via:
//
//	QueryLambdaSqlDefaultParameterArgs{...}
type QueryLambdaSqlDefaultParameterInput interface {
	pulumi.Input

	ToQueryLambdaSqlDefaultParameterOutput() QueryLambdaSqlDefaultParameterOutput
	ToQueryLambdaSqlDefaultParameterOutputWithContext(context.Context) QueryLambdaSqlDefaultParameterOutput
}

type QueryLambdaSqlDefaultParameterArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (QueryLambdaSqlDefaultParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (i QueryLambdaSqlDefaultParameterArgs) ToQueryLambdaSqlDefaultParameterOutput() QueryLambdaSqlDefaultParameterOutput {
	return i.ToQueryLambdaSqlDefaultParameterOutputWithContext(context.Background())
}

func (i QueryLambdaSqlDefaultParameterArgs) ToQueryLambdaSqlDefaultParameterOutputWithContext(ctx context.Context) QueryLambdaSqlDefaultParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaSqlDefaultParameterOutput)
}

// QueryLambdaSqlDefaultParameterArrayInput is an input type that accepts QueryLambdaSqlDefaultParameterArray and QueryLambdaSqlDefaultParameterArrayOutput values.
// You can construct a concrete instance of `QueryLambdaSqlDefaultParameterArrayInput` via:
//
//	QueryLambdaSqlDefaultParameterArray{ QueryLambdaSqlDefaultParameterArgs{...} }
type QueryLambdaSqlDefaultParameterArrayInput interface {
	pulumi.Input

	ToQueryLambdaSqlDefaultParameterArrayOutput() QueryLambdaSqlDefaultParameterArrayOutput
	ToQueryLambdaSqlDefaultParameterArrayOutputWithContext(context.Context) QueryLambdaSqlDefaultParameterArrayOutput
}

type QueryLambdaSqlDefaultParameterArray []QueryLambdaSqlDefaultParameterInput

func (QueryLambdaSqlDefaultParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (i QueryLambdaSqlDefaultParameterArray) ToQueryLambdaSqlDefaultParameterArrayOutput() QueryLambdaSqlDefaultParameterArrayOutput {
	return i.ToQueryLambdaSqlDefaultParameterArrayOutputWithContext(context.Background())
}

func (i QueryLambdaSqlDefaultParameterArray) ToQueryLambdaSqlDefaultParameterArrayOutputWithContext(ctx context.Context) QueryLambdaSqlDefaultParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaSqlDefaultParameterArrayOutput)
}

type QueryLambdaSqlDefaultParameterOutput struct{ *pulumi.OutputState }

func (QueryLambdaSqlDefaultParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (o QueryLambdaSqlDefaultParameterOutput) ToQueryLambdaSqlDefaultParameterOutput() QueryLambdaSqlDefaultParameterOutput {
	return o
}

func (o QueryLambdaSqlDefaultParameterOutput) ToQueryLambdaSqlDefaultParameterOutputWithContext(ctx context.Context) QueryLambdaSqlDefaultParameterOutput {
	return o
}

func (o QueryLambdaSqlDefaultParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryLambdaSqlDefaultParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o QueryLambdaSqlDefaultParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryLambdaSqlDefaultParameter) string { return v.Type }).(pulumi.StringOutput)
}

func (o QueryLambdaSqlDefaultParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v QueryLambdaSqlDefaultParameter) string { return v.Value }).(pulumi.StringOutput)
}

type QueryLambdaSqlDefaultParameterArrayOutput struct{ *pulumi.OutputState }

func (QueryLambdaSqlDefaultParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (o QueryLambdaSqlDefaultParameterArrayOutput) ToQueryLambdaSqlDefaultParameterArrayOutput() QueryLambdaSqlDefaultParameterArrayOutput {
	return o
}

func (o QueryLambdaSqlDefaultParameterArrayOutput) ToQueryLambdaSqlDefaultParameterArrayOutputWithContext(ctx context.Context) QueryLambdaSqlDefaultParameterArrayOutput {
	return o
}

func (o QueryLambdaSqlDefaultParameterArrayOutput) Index(i pulumi.IntInput) QueryLambdaSqlDefaultParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryLambdaSqlDefaultParameter {
		return vs[0].([]QueryLambdaSqlDefaultParameter)[vs[1].(int)]
	}).(QueryLambdaSqlDefaultParameterOutput)
}

type RolePrivilege struct {
	// The action allowed by this privilege.
	Action string `pulumi:"action"`
	// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
	Cluster *string `pulumi:"cluster"`
	// The resource on which this action is allowed. Defaults to 'All' if not specified.
	ResourceName *string `pulumi:"resourceName"`
}

// RolePrivilegeInput is an input type that accepts RolePrivilegeArgs and RolePrivilegeOutput values.
// You can construct a concrete instance of `RolePrivilegeInput` via:
//
//	RolePrivilegeArgs{...}
type RolePrivilegeInput interface {
	pulumi.Input

	ToRolePrivilegeOutput() RolePrivilegeOutput
	ToRolePrivilegeOutputWithContext(context.Context) RolePrivilegeOutput
}

type RolePrivilegeArgs struct {
	// The action allowed by this privilege.
	Action pulumi.StringInput `pulumi:"action"`
	// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// The resource on which this action is allowed. Defaults to 'All' if not specified.
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
}

func (RolePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePrivilege)(nil)).Elem()
}

func (i RolePrivilegeArgs) ToRolePrivilegeOutput() RolePrivilegeOutput {
	return i.ToRolePrivilegeOutputWithContext(context.Background())
}

func (i RolePrivilegeArgs) ToRolePrivilegeOutputWithContext(ctx context.Context) RolePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePrivilegeOutput)
}

// RolePrivilegeArrayInput is an input type that accepts RolePrivilegeArray and RolePrivilegeArrayOutput values.
// You can construct a concrete instance of `RolePrivilegeArrayInput` via:
//
//	RolePrivilegeArray{ RolePrivilegeArgs{...} }
type RolePrivilegeArrayInput interface {
	pulumi.Input

	ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput
	ToRolePrivilegeArrayOutputWithContext(context.Context) RolePrivilegeArrayOutput
}

type RolePrivilegeArray []RolePrivilegeInput

func (RolePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePrivilege)(nil)).Elem()
}

func (i RolePrivilegeArray) ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput {
	return i.ToRolePrivilegeArrayOutputWithContext(context.Background())
}

func (i RolePrivilegeArray) ToRolePrivilegeArrayOutputWithContext(ctx context.Context) RolePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePrivilegeArrayOutput)
}

type RolePrivilegeOutput struct{ *pulumi.OutputState }

func (RolePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePrivilege)(nil)).Elem()
}

func (o RolePrivilegeOutput) ToRolePrivilegeOutput() RolePrivilegeOutput {
	return o
}

func (o RolePrivilegeOutput) ToRolePrivilegeOutputWithContext(ctx context.Context) RolePrivilegeOutput {
	return o
}

// The action allowed by this privilege.
func (o RolePrivilegeOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RolePrivilege) string { return v.Action }).(pulumi.StringOutput)
}

// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
func (o RolePrivilegeOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePrivilege) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// The resource on which this action is allowed. Defaults to 'All' if not specified.
func (o RolePrivilegeOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePrivilege) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

type RolePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (RolePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePrivilege)(nil)).Elem()
}

func (o RolePrivilegeArrayOutput) ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput {
	return o
}

func (o RolePrivilegeArrayOutput) ToRolePrivilegeArrayOutputWithContext(ctx context.Context) RolePrivilegeArrayOutput {
	return o
}

func (o RolePrivilegeArrayOutput) Index(i pulumi.IntInput) RolePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePrivilege {
		return vs[0].([]RolePrivilege)[vs[1].(int)]
	}).(RolePrivilegeOutput)
}

type S3CollectionSource struct {
	// S3 bucket containing the target data.
	Bucket string                 `pulumi:"bucket"`
	Csv    *S3CollectionSourceCsv `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format string `pulumi:"format"`
	// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
	IntegrationName string `pulumi:"integrationName"`
	// Regex path pattern to S3 keys.
	Pattern *string `pulumi:"pattern"`
	// Simple path prefix to S3 keys.
	//
	// Deprecated: use pattern instead
	Prefix *string                `pulumi:"prefix"`
	Xml    *S3CollectionSourceXml `pulumi:"xml"`
}

// S3CollectionSourceInput is an input type that accepts S3CollectionSourceArgs and S3CollectionSourceOutput values.
// You can construct a concrete instance of `S3CollectionSourceInput` via:
//
//	S3CollectionSourceArgs{...}
type S3CollectionSourceInput interface {
	pulumi.Input

	ToS3CollectionSourceOutput() S3CollectionSourceOutput
	ToS3CollectionSourceOutputWithContext(context.Context) S3CollectionSourceOutput
}

type S3CollectionSourceArgs struct {
	// S3 bucket containing the target data.
	Bucket pulumi.StringInput            `pulumi:"bucket"`
	Csv    S3CollectionSourceCsvPtrInput `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Regex path pattern to S3 keys.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Simple path prefix to S3 keys.
	//
	// Deprecated: use pattern instead
	Prefix pulumi.StringPtrInput         `pulumi:"prefix"`
	Xml    S3CollectionSourceXmlPtrInput `pulumi:"xml"`
}

func (S3CollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSource)(nil)).Elem()
}

func (i S3CollectionSourceArgs) ToS3CollectionSourceOutput() S3CollectionSourceOutput {
	return i.ToS3CollectionSourceOutputWithContext(context.Background())
}

func (i S3CollectionSourceArgs) ToS3CollectionSourceOutputWithContext(ctx context.Context) S3CollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceOutput)
}

// S3CollectionSourceArrayInput is an input type that accepts S3CollectionSourceArray and S3CollectionSourceArrayOutput values.
// You can construct a concrete instance of `S3CollectionSourceArrayInput` via:
//
//	S3CollectionSourceArray{ S3CollectionSourceArgs{...} }
type S3CollectionSourceArrayInput interface {
	pulumi.Input

	ToS3CollectionSourceArrayOutput() S3CollectionSourceArrayOutput
	ToS3CollectionSourceArrayOutputWithContext(context.Context) S3CollectionSourceArrayOutput
}

type S3CollectionSourceArray []S3CollectionSourceInput

func (S3CollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3CollectionSource)(nil)).Elem()
}

func (i S3CollectionSourceArray) ToS3CollectionSourceArrayOutput() S3CollectionSourceArrayOutput {
	return i.ToS3CollectionSourceArrayOutputWithContext(context.Background())
}

func (i S3CollectionSourceArray) ToS3CollectionSourceArrayOutputWithContext(ctx context.Context) S3CollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceArrayOutput)
}

type S3CollectionSourceOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSource)(nil)).Elem()
}

func (o S3CollectionSourceOutput) ToS3CollectionSourceOutput() S3CollectionSourceOutput {
	return o
}

func (o S3CollectionSourceOutput) ToS3CollectionSourceOutputWithContext(ctx context.Context) S3CollectionSourceOutput {
	return o
}

// S3 bucket containing the target data.
func (o S3CollectionSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v S3CollectionSource) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o S3CollectionSourceOutput) Csv() S3CollectionSourceCsvPtrOutput {
	return o.ApplyT(func(v S3CollectionSource) *S3CollectionSourceCsv { return v.Csv }).(S3CollectionSourceCsvPtrOutput)
}

// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
func (o S3CollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v S3CollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
func (o S3CollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v S3CollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Regex path pattern to S3 keys.
func (o S3CollectionSourceOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSource) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Simple path prefix to S3 keys.
//
// Deprecated: use pattern instead
func (o S3CollectionSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o S3CollectionSourceOutput) Xml() S3CollectionSourceXmlPtrOutput {
	return o.ApplyT(func(v S3CollectionSource) *S3CollectionSourceXml { return v.Xml }).(S3CollectionSourceXmlPtrOutput)
}

type S3CollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3CollectionSource)(nil)).Elem()
}

func (o S3CollectionSourceArrayOutput) ToS3CollectionSourceArrayOutput() S3CollectionSourceArrayOutput {
	return o
}

func (o S3CollectionSourceArrayOutput) ToS3CollectionSourceArrayOutputWithContext(ctx context.Context) S3CollectionSourceArrayOutput {
	return o
}

func (o S3CollectionSourceArrayOutput) Index(i pulumi.IntInput) S3CollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3CollectionSource {
		return vs[0].([]S3CollectionSource)[vs[1].(int)]
	}).(S3CollectionSourceOutput)
}

type S3CollectionSourceCsv struct {
	// The names of the columns.
	ColumnNames []string `pulumi:"columnNames"`
	// The types of the columns.
	ColumnTypes []string `pulumi:"columnTypes"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding *string `pulumi:"encoding"`
	// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
	EscapeChar *string `pulumi:"escapeChar"`
	// If the first line in every object specifies the column names.
	FirstLineAsColumnNames *bool `pulumi:"firstLineAsColumnNames"`
	// Character within which a cell value is enclosed. Defaults to double quote.
	QuoteChar *string `pulumi:"quoteChar"`
	// A single character that is the column separator.
	Separator *string `pulumi:"separator"`
}

// S3CollectionSourceCsvInput is an input type that accepts S3CollectionSourceCsvArgs and S3CollectionSourceCsvOutput values.
// You can construct a concrete instance of `S3CollectionSourceCsvInput` via:
//
//	S3CollectionSourceCsvArgs{...}
type S3CollectionSourceCsvInput interface {
	pulumi.Input

	ToS3CollectionSourceCsvOutput() S3CollectionSourceCsvOutput
	ToS3CollectionSourceCsvOutputWithContext(context.Context) S3CollectionSourceCsvOutput
}

type S3CollectionSourceCsvArgs struct {
	// The names of the columns.
	ColumnNames pulumi.StringArrayInput `pulumi:"columnNames"`
	// The types of the columns.
	ColumnTypes pulumi.StringArrayInput `pulumi:"columnTypes"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
	EscapeChar pulumi.StringPtrInput `pulumi:"escapeChar"`
	// If the first line in every object specifies the column names.
	FirstLineAsColumnNames pulumi.BoolPtrInput `pulumi:"firstLineAsColumnNames"`
	// Character within which a cell value is enclosed. Defaults to double quote.
	QuoteChar pulumi.StringPtrInput `pulumi:"quoteChar"`
	// A single character that is the column separator.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
}

func (S3CollectionSourceCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSourceCsv)(nil)).Elem()
}

func (i S3CollectionSourceCsvArgs) ToS3CollectionSourceCsvOutput() S3CollectionSourceCsvOutput {
	return i.ToS3CollectionSourceCsvOutputWithContext(context.Background())
}

func (i S3CollectionSourceCsvArgs) ToS3CollectionSourceCsvOutputWithContext(ctx context.Context) S3CollectionSourceCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceCsvOutput)
}

func (i S3CollectionSourceCsvArgs) ToS3CollectionSourceCsvPtrOutput() S3CollectionSourceCsvPtrOutput {
	return i.ToS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i S3CollectionSourceCsvArgs) ToS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) S3CollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceCsvOutput).ToS3CollectionSourceCsvPtrOutputWithContext(ctx)
}

// S3CollectionSourceCsvPtrInput is an input type that accepts S3CollectionSourceCsvArgs, S3CollectionSourceCsvPtr and S3CollectionSourceCsvPtrOutput values.
// You can construct a concrete instance of `S3CollectionSourceCsvPtrInput` via:
//
//	        S3CollectionSourceCsvArgs{...}
//
//	or:
//
//	        nil
type S3CollectionSourceCsvPtrInput interface {
	pulumi.Input

	ToS3CollectionSourceCsvPtrOutput() S3CollectionSourceCsvPtrOutput
	ToS3CollectionSourceCsvPtrOutputWithContext(context.Context) S3CollectionSourceCsvPtrOutput
}

type s3collectionSourceCsvPtrType S3CollectionSourceCsvArgs

func S3CollectionSourceCsvPtr(v *S3CollectionSourceCsvArgs) S3CollectionSourceCsvPtrInput {
	return (*s3collectionSourceCsvPtrType)(v)
}

func (*s3collectionSourceCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3CollectionSourceCsv)(nil)).Elem()
}

func (i *s3collectionSourceCsvPtrType) ToS3CollectionSourceCsvPtrOutput() S3CollectionSourceCsvPtrOutput {
	return i.ToS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i *s3collectionSourceCsvPtrType) ToS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) S3CollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceCsvPtrOutput)
}

type S3CollectionSourceCsvOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSourceCsv)(nil)).Elem()
}

func (o S3CollectionSourceCsvOutput) ToS3CollectionSourceCsvOutput() S3CollectionSourceCsvOutput {
	return o
}

func (o S3CollectionSourceCsvOutput) ToS3CollectionSourceCsvOutputWithContext(ctx context.Context) S3CollectionSourceCsvOutput {
	return o
}

func (o S3CollectionSourceCsvOutput) ToS3CollectionSourceCsvPtrOutput() S3CollectionSourceCsvPtrOutput {
	return o.ToS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (o S3CollectionSourceCsvOutput) ToS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) S3CollectionSourceCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3CollectionSourceCsv) *S3CollectionSourceCsv {
		return &v
	}).(S3CollectionSourceCsvPtrOutput)
}

// The names of the columns.
func (o S3CollectionSourceCsvOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

// The types of the columns.
func (o S3CollectionSourceCsvOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) []string { return v.ColumnTypes }).(pulumi.StringArrayOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o S3CollectionSourceCsvOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
func (o S3CollectionSourceCsvOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) *string { return v.EscapeChar }).(pulumi.StringPtrOutput)
}

// If the first line in every object specifies the column names.
func (o S3CollectionSourceCsvOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) *bool { return v.FirstLineAsColumnNames }).(pulumi.BoolPtrOutput)
}

// Character within which a cell value is enclosed. Defaults to double quote.
func (o S3CollectionSourceCsvOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) *string { return v.QuoteChar }).(pulumi.StringPtrOutput)
}

// A single character that is the column separator.
func (o S3CollectionSourceCsvOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceCsv) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

type S3CollectionSourceCsvPtrOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3CollectionSourceCsv)(nil)).Elem()
}

func (o S3CollectionSourceCsvPtrOutput) ToS3CollectionSourceCsvPtrOutput() S3CollectionSourceCsvPtrOutput {
	return o
}

func (o S3CollectionSourceCsvPtrOutput) ToS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) S3CollectionSourceCsvPtrOutput {
	return o
}

func (o S3CollectionSourceCsvPtrOutput) Elem() S3CollectionSourceCsvOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) S3CollectionSourceCsv {
		if v != nil {
			return *v
		}
		var ret S3CollectionSourceCsv
		return ret
	}).(S3CollectionSourceCsvOutput)
}

// The names of the columns.
func (o S3CollectionSourceCsvPtrOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(pulumi.StringArrayOutput)
}

// The types of the columns.
func (o S3CollectionSourceCsvPtrOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnTypes
	}).(pulumi.StringArrayOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o S3CollectionSourceCsvPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Escape character removes any special meaning from the character that follows it. Defaults to backslash.
func (o S3CollectionSourceCsvPtrOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.StringPtrOutput)
}

// If the first line in every object specifies the column names.
func (o S3CollectionSourceCsvPtrOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) *bool {
		if v == nil {
			return nil
		}
		return v.FirstLineAsColumnNames
	}).(pulumi.BoolPtrOutput)
}

// Character within which a cell value is enclosed. Defaults to double quote.
func (o S3CollectionSourceCsvPtrOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.StringPtrOutput)
}

// A single character that is the column separator.
func (o S3CollectionSourceCsvPtrOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Separator
	}).(pulumi.StringPtrOutput)
}

type S3CollectionSourceXml struct {
	// Tag to differentiate between attributes and elements.
	AttributePrefix *string `pulumi:"attributePrefix"`
	// Tags with which documents are identified
	DocTag *string `pulumi:"docTag"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding *string `pulumi:"encoding"`
	// Tag until which xml is ignored.
	RootTag *string `pulumi:"rootTag"`
	// Tag used for the value when there are attributes in the element having no child.
	ValueTag *string `pulumi:"valueTag"`
}

// S3CollectionSourceXmlInput is an input type that accepts S3CollectionSourceXmlArgs and S3CollectionSourceXmlOutput values.
// You can construct a concrete instance of `S3CollectionSourceXmlInput` via:
//
//	S3CollectionSourceXmlArgs{...}
type S3CollectionSourceXmlInput interface {
	pulumi.Input

	ToS3CollectionSourceXmlOutput() S3CollectionSourceXmlOutput
	ToS3CollectionSourceXmlOutputWithContext(context.Context) S3CollectionSourceXmlOutput
}

type S3CollectionSourceXmlArgs struct {
	// Tag to differentiate between attributes and elements.
	AttributePrefix pulumi.StringPtrInput `pulumi:"attributePrefix"`
	// Tags with which documents are identified
	DocTag pulumi.StringPtrInput `pulumi:"docTag"`
	// Can be one of: UTF-8, ISO*8859*1, UTF-16.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Tag until which xml is ignored.
	RootTag pulumi.StringPtrInput `pulumi:"rootTag"`
	// Tag used for the value when there are attributes in the element having no child.
	ValueTag pulumi.StringPtrInput `pulumi:"valueTag"`
}

func (S3CollectionSourceXmlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSourceXml)(nil)).Elem()
}

func (i S3CollectionSourceXmlArgs) ToS3CollectionSourceXmlOutput() S3CollectionSourceXmlOutput {
	return i.ToS3CollectionSourceXmlOutputWithContext(context.Background())
}

func (i S3CollectionSourceXmlArgs) ToS3CollectionSourceXmlOutputWithContext(ctx context.Context) S3CollectionSourceXmlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceXmlOutput)
}

func (i S3CollectionSourceXmlArgs) ToS3CollectionSourceXmlPtrOutput() S3CollectionSourceXmlPtrOutput {
	return i.ToS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i S3CollectionSourceXmlArgs) ToS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) S3CollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceXmlOutput).ToS3CollectionSourceXmlPtrOutputWithContext(ctx)
}

// S3CollectionSourceXmlPtrInput is an input type that accepts S3CollectionSourceXmlArgs, S3CollectionSourceXmlPtr and S3CollectionSourceXmlPtrOutput values.
// You can construct a concrete instance of `S3CollectionSourceXmlPtrInput` via:
//
//	        S3CollectionSourceXmlArgs{...}
//
//	or:
//
//	        nil
type S3CollectionSourceXmlPtrInput interface {
	pulumi.Input

	ToS3CollectionSourceXmlPtrOutput() S3CollectionSourceXmlPtrOutput
	ToS3CollectionSourceXmlPtrOutputWithContext(context.Context) S3CollectionSourceXmlPtrOutput
}

type s3collectionSourceXmlPtrType S3CollectionSourceXmlArgs

func S3CollectionSourceXmlPtr(v *S3CollectionSourceXmlArgs) S3CollectionSourceXmlPtrInput {
	return (*s3collectionSourceXmlPtrType)(v)
}

func (*s3collectionSourceXmlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3CollectionSourceXml)(nil)).Elem()
}

func (i *s3collectionSourceXmlPtrType) ToS3CollectionSourceXmlPtrOutput() S3CollectionSourceXmlPtrOutput {
	return i.ToS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i *s3collectionSourceXmlPtrType) ToS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) S3CollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CollectionSourceXmlPtrOutput)
}

type S3CollectionSourceXmlOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceXmlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3CollectionSourceXml)(nil)).Elem()
}

func (o S3CollectionSourceXmlOutput) ToS3CollectionSourceXmlOutput() S3CollectionSourceXmlOutput {
	return o
}

func (o S3CollectionSourceXmlOutput) ToS3CollectionSourceXmlOutputWithContext(ctx context.Context) S3CollectionSourceXmlOutput {
	return o
}

func (o S3CollectionSourceXmlOutput) ToS3CollectionSourceXmlPtrOutput() S3CollectionSourceXmlPtrOutput {
	return o.ToS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (o S3CollectionSourceXmlOutput) ToS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) S3CollectionSourceXmlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3CollectionSourceXml) *S3CollectionSourceXml {
		return &v
	}).(S3CollectionSourceXmlPtrOutput)
}

// Tag to differentiate between attributes and elements.
func (o S3CollectionSourceXmlOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceXml) *string { return v.AttributePrefix }).(pulumi.StringPtrOutput)
}

// Tags with which documents are identified
func (o S3CollectionSourceXmlOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceXml) *string { return v.DocTag }).(pulumi.StringPtrOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o S3CollectionSourceXmlOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceXml) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Tag until which xml is ignored.
func (o S3CollectionSourceXmlOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceXml) *string { return v.RootTag }).(pulumi.StringPtrOutput)
}

// Tag used for the value when there are attributes in the element having no child.
func (o S3CollectionSourceXmlOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3CollectionSourceXml) *string { return v.ValueTag }).(pulumi.StringPtrOutput)
}

type S3CollectionSourceXmlPtrOutput struct{ *pulumi.OutputState }

func (S3CollectionSourceXmlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3CollectionSourceXml)(nil)).Elem()
}

func (o S3CollectionSourceXmlPtrOutput) ToS3CollectionSourceXmlPtrOutput() S3CollectionSourceXmlPtrOutput {
	return o
}

func (o S3CollectionSourceXmlPtrOutput) ToS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) S3CollectionSourceXmlPtrOutput {
	return o
}

func (o S3CollectionSourceXmlPtrOutput) Elem() S3CollectionSourceXmlOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) S3CollectionSourceXml {
		if v != nil {
			return *v
		}
		var ret S3CollectionSourceXml
		return ret
	}).(S3CollectionSourceXmlOutput)
}

// Tag to differentiate between attributes and elements.
func (o S3CollectionSourceXmlPtrOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.AttributePrefix
	}).(pulumi.StringPtrOutput)
}

// Tags with which documents are identified
func (o S3CollectionSourceXmlPtrOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.DocTag
	}).(pulumi.StringPtrOutput)
}

// Can be one of: UTF-8, ISO*8859*1, UTF-16.
func (o S3CollectionSourceXmlPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Tag until which xml is ignored.
func (o S3CollectionSourceXmlPtrOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.RootTag
	}).(pulumi.StringPtrOutput)
}

// Tag used for the value when there are attributes in the element having no child.
func (o S3CollectionSourceXmlPtrOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.ValueTag
	}).(pulumi.StringPtrOutput)
}

type GetAccountCluster struct {
	ApiServer string `pulumi:"apiServer"`
	AwsRegion string `pulumi:"awsRegion"`
	Type      string `pulumi:"type"`
}

// GetAccountClusterInput is an input type that accepts GetAccountClusterArgs and GetAccountClusterOutput values.
// You can construct a concrete instance of `GetAccountClusterInput` via:
//
//	GetAccountClusterArgs{...}
type GetAccountClusterInput interface {
	pulumi.Input

	ToGetAccountClusterOutput() GetAccountClusterOutput
	ToGetAccountClusterOutputWithContext(context.Context) GetAccountClusterOutput
}

type GetAccountClusterArgs struct {
	ApiServer pulumi.StringInput `pulumi:"apiServer"`
	AwsRegion pulumi.StringInput `pulumi:"awsRegion"`
	Type      pulumi.StringInput `pulumi:"type"`
}

func (GetAccountClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountCluster)(nil)).Elem()
}

func (i GetAccountClusterArgs) ToGetAccountClusterOutput() GetAccountClusterOutput {
	return i.ToGetAccountClusterOutputWithContext(context.Background())
}

func (i GetAccountClusterArgs) ToGetAccountClusterOutputWithContext(ctx context.Context) GetAccountClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountClusterOutput)
}

// GetAccountClusterArrayInput is an input type that accepts GetAccountClusterArray and GetAccountClusterArrayOutput values.
// You can construct a concrete instance of `GetAccountClusterArrayInput` via:
//
//	GetAccountClusterArray{ GetAccountClusterArgs{...} }
type GetAccountClusterArrayInput interface {
	pulumi.Input

	ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput
	ToGetAccountClusterArrayOutputWithContext(context.Context) GetAccountClusterArrayOutput
}

type GetAccountClusterArray []GetAccountClusterInput

func (GetAccountClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountCluster)(nil)).Elem()
}

func (i GetAccountClusterArray) ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput {
	return i.ToGetAccountClusterArrayOutputWithContext(context.Background())
}

func (i GetAccountClusterArray) ToGetAccountClusterArrayOutputWithContext(ctx context.Context) GetAccountClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountClusterArrayOutput)
}

type GetAccountClusterOutput struct{ *pulumi.OutputState }

func (GetAccountClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountCluster)(nil)).Elem()
}

func (o GetAccountClusterOutput) ToGetAccountClusterOutput() GetAccountClusterOutput {
	return o
}

func (o GetAccountClusterOutput) ToGetAccountClusterOutputWithContext(ctx context.Context) GetAccountClusterOutput {
	return o
}

func (o GetAccountClusterOutput) ApiServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.ApiServer }).(pulumi.StringOutput)
}

func (o GetAccountClusterOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.AwsRegion }).(pulumi.StringOutput)
}

func (o GetAccountClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.Type }).(pulumi.StringOutput)
}

type GetAccountClusterArrayOutput struct{ *pulumi.OutputState }

func (GetAccountClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountCluster)(nil)).Elem()
}

func (o GetAccountClusterArrayOutput) ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput {
	return o
}

func (o GetAccountClusterArrayOutput) ToGetAccountClusterArrayOutputWithContext(ctx context.Context) GetAccountClusterArrayOutput {
	return o
}

func (o GetAccountClusterArrayOutput) Index(i pulumi.IntInput) GetAccountClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountCluster {
		return vs[0].([]GetAccountCluster)[vs[1].(int)]
	}).(GetAccountClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamodbCollectionSourceInput)(nil)).Elem(), DynamodbCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamodbCollectionSourceArrayInput)(nil)).Elem(), DynamodbCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceInput)(nil)).Elem(), GcsCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceArrayInput)(nil)).Elem(), GcsCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceCsvInput)(nil)).Elem(), GcsCollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceCsvPtrInput)(nil)).Elem(), GcsCollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceXmlInput)(nil)).Elem(), GcsCollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsCollectionSourceXmlPtrInput)(nil)).Elem(), GcsCollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceInput)(nil)).Elem(), KafkaCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceArrayInput)(nil)).Elem(), KafkaCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceStatusInput)(nil)).Elem(), KafkaCollectionSourceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceStatusArrayInput)(nil)).Elem(), KafkaCollectionSourceStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceStatusPartitionInput)(nil)).Elem(), KafkaCollectionSourceStatusPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaCollectionSourceStatusPartitionArrayInput)(nil)).Elem(), KafkaCollectionSourceStatusPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisCollectionSourceInput)(nil)).Elem(), KinesisCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisCollectionSourceArrayInput)(nil)).Elem(), KinesisCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbCollectionSourceInput)(nil)).Elem(), MongodbCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbCollectionSourceArrayInput)(nil)).Elem(), MongodbCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaSqlInput)(nil)).Elem(), QueryLambdaSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaSqlArrayInput)(nil)).Elem(), QueryLambdaSqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaSqlDefaultParameterInput)(nil)).Elem(), QueryLambdaSqlDefaultParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaSqlDefaultParameterArrayInput)(nil)).Elem(), QueryLambdaSqlDefaultParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePrivilegeInput)(nil)).Elem(), RolePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePrivilegeArrayInput)(nil)).Elem(), RolePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceInput)(nil)).Elem(), S3CollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceArrayInput)(nil)).Elem(), S3CollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceCsvInput)(nil)).Elem(), S3CollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceCsvPtrInput)(nil)).Elem(), S3CollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceXmlInput)(nil)).Elem(), S3CollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CollectionSourceXmlPtrInput)(nil)).Elem(), S3CollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountClusterInput)(nil)).Elem(), GetAccountClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountClusterArrayInput)(nil)).Elem(), GetAccountClusterArray{})
	pulumi.RegisterOutputType(DynamodbCollectionSourceOutput{})
	pulumi.RegisterOutputType(DynamodbCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceCsvOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceCsvPtrOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceXmlOutput{})
	pulumi.RegisterOutputType(GcsCollectionSourceXmlPtrOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceStatusOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceStatusArrayOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceStatusPartitionOutput{})
	pulumi.RegisterOutputType(KafkaCollectionSourceStatusPartitionArrayOutput{})
	pulumi.RegisterOutputType(KinesisCollectionSourceOutput{})
	pulumi.RegisterOutputType(KinesisCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(MongodbCollectionSourceOutput{})
	pulumi.RegisterOutputType(MongodbCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(QueryLambdaSqlOutput{})
	pulumi.RegisterOutputType(QueryLambdaSqlArrayOutput{})
	pulumi.RegisterOutputType(QueryLambdaSqlDefaultParameterOutput{})
	pulumi.RegisterOutputType(QueryLambdaSqlDefaultParameterArrayOutput{})
	pulumi.RegisterOutputType(RolePrivilegeOutput{})
	pulumi.RegisterOutputType(RolePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceCsvOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceCsvPtrOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceXmlOutput{})
	pulumi.RegisterOutputType(S3CollectionSourceXmlPtrOutput{})
	pulumi.RegisterOutputType(GetAccountClusterOutput{})
	pulumi.RegisterOutputType(GetAccountClusterArrayOutput{})
}
