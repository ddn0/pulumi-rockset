// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a collection with an DynamoDB source attached.
type DynamodbCollection struct {
	pulumi.CustomResourceState

	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrOutput `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrOutput `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources DynamodbCollectionSourceArrayOutput `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrOutput `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrOutput `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewDynamodbCollection registers a new resource with the given unique name, arguments, and options.
func NewDynamodbCollection(ctx *pulumi.Context,
	name string, args *DynamodbCollectionArgs, opts ...pulumi.ResourceOption) (*DynamodbCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynamodbCollection
	err := ctx.RegisterResource("rockset:index/dynamodbCollection:DynamodbCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynamodbCollection gets an existing DynamodbCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynamodbCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynamodbCollectionState, opts ...pulumi.ResourceOption) (*DynamodbCollection, error) {
	var resource DynamodbCollection
	err := ctx.ReadResource("rockset:index/dynamodbCollection:DynamodbCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynamodbCollection resources.
type dynamodbCollectionState struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []DynamodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type DynamodbCollectionState struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources DynamodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (DynamodbCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamodbCollectionState)(nil)).Elem()
}

type dynamodbCollectionArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []DynamodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a DynamodbCollection resource.
type DynamodbCollectionArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources DynamodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (DynamodbCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynamodbCollectionArgs)(nil)).Elem()
}

type DynamodbCollectionInput interface {
	pulumi.Input

	ToDynamodbCollectionOutput() DynamodbCollectionOutput
	ToDynamodbCollectionOutputWithContext(ctx context.Context) DynamodbCollectionOutput
}

func (*DynamodbCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamodbCollection)(nil)).Elem()
}

func (i *DynamodbCollection) ToDynamodbCollectionOutput() DynamodbCollectionOutput {
	return i.ToDynamodbCollectionOutputWithContext(context.Background())
}

func (i *DynamodbCollection) ToDynamodbCollectionOutputWithContext(ctx context.Context) DynamodbCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamodbCollectionOutput)
}

// DynamodbCollectionArrayInput is an input type that accepts DynamodbCollectionArray and DynamodbCollectionArrayOutput values.
// You can construct a concrete instance of `DynamodbCollectionArrayInput` via:
//
//	DynamodbCollectionArray{ DynamodbCollectionArgs{...} }
type DynamodbCollectionArrayInput interface {
	pulumi.Input

	ToDynamodbCollectionArrayOutput() DynamodbCollectionArrayOutput
	ToDynamodbCollectionArrayOutputWithContext(context.Context) DynamodbCollectionArrayOutput
}

type DynamodbCollectionArray []DynamodbCollectionInput

func (DynamodbCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamodbCollection)(nil)).Elem()
}

func (i DynamodbCollectionArray) ToDynamodbCollectionArrayOutput() DynamodbCollectionArrayOutput {
	return i.ToDynamodbCollectionArrayOutputWithContext(context.Background())
}

func (i DynamodbCollectionArray) ToDynamodbCollectionArrayOutputWithContext(ctx context.Context) DynamodbCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamodbCollectionArrayOutput)
}

// DynamodbCollectionMapInput is an input type that accepts DynamodbCollectionMap and DynamodbCollectionMapOutput values.
// You can construct a concrete instance of `DynamodbCollectionMapInput` via:
//
//	DynamodbCollectionMap{ "key": DynamodbCollectionArgs{...} }
type DynamodbCollectionMapInput interface {
	pulumi.Input

	ToDynamodbCollectionMapOutput() DynamodbCollectionMapOutput
	ToDynamodbCollectionMapOutputWithContext(context.Context) DynamodbCollectionMapOutput
}

type DynamodbCollectionMap map[string]DynamodbCollectionInput

func (DynamodbCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamodbCollection)(nil)).Elem()
}

func (i DynamodbCollectionMap) ToDynamodbCollectionMapOutput() DynamodbCollectionMapOutput {
	return i.ToDynamodbCollectionMapOutputWithContext(context.Background())
}

func (i DynamodbCollectionMap) ToDynamodbCollectionMapOutputWithContext(ctx context.Context) DynamodbCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamodbCollectionMapOutput)
}

type DynamodbCollectionOutput struct{ *pulumi.OutputState }

func (DynamodbCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamodbCollection)(nil)).Elem()
}

func (o DynamodbCollectionOutput) ToDynamodbCollectionOutput() DynamodbCollectionOutput {
	return o
}

func (o DynamodbCollectionOutput) ToDynamodbCollectionOutputWithContext(ctx context.Context) DynamodbCollectionOutput {
	return o
}

// Text describing the collection.
func (o DynamodbCollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Ingest transformation SQL query. Turns the collection into insertOnly mode.
func (o DynamodbCollectionOutput) IngestTransformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.StringPtrOutput { return v.IngestTransformation }).(pulumi.StringPtrOutput)
}

// Unique identifier for the collection. Can contain alphanumeric or dash characters.
func (o DynamodbCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of seconds after which data is purged. Based on event time.
func (o DynamodbCollectionOutput) RetentionSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.IntPtrOutput { return v.RetentionSecs }).(pulumi.IntPtrOutput)
}

// Defines a source for this collection.
func (o DynamodbCollectionOutput) Sources() DynamodbCollectionSourceArrayOutput {
	return o.ApplyT(func(v *DynamodbCollection) DynamodbCollectionSourceArrayOutput { return v.Sources }).(DynamodbCollectionSourceArrayOutput)
}

// Wait until the collection is ready.
func (o DynamodbCollectionOutput) WaitForCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.BoolPtrOutput { return v.WaitForCollection }).(pulumi.BoolPtrOutput)
}

// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
func (o DynamodbCollectionOutput) WaitForDocuments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.IntPtrOutput { return v.WaitForDocuments }).(pulumi.IntPtrOutput)
}

// The name of the workspace.
func (o DynamodbCollectionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *DynamodbCollection) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type DynamodbCollectionArrayOutput struct{ *pulumi.OutputState }

func (DynamodbCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynamodbCollection)(nil)).Elem()
}

func (o DynamodbCollectionArrayOutput) ToDynamodbCollectionArrayOutput() DynamodbCollectionArrayOutput {
	return o
}

func (o DynamodbCollectionArrayOutput) ToDynamodbCollectionArrayOutputWithContext(ctx context.Context) DynamodbCollectionArrayOutput {
	return o
}

func (o DynamodbCollectionArrayOutput) Index(i pulumi.IntInput) DynamodbCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynamodbCollection {
		return vs[0].([]*DynamodbCollection)[vs[1].(int)]
	}).(DynamodbCollectionOutput)
}

type DynamodbCollectionMapOutput struct{ *pulumi.OutputState }

func (DynamodbCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynamodbCollection)(nil)).Elem()
}

func (o DynamodbCollectionMapOutput) ToDynamodbCollectionMapOutput() DynamodbCollectionMapOutput {
	return o
}

func (o DynamodbCollectionMapOutput) ToDynamodbCollectionMapOutputWithContext(ctx context.Context) DynamodbCollectionMapOutput {
	return o
}

func (o DynamodbCollectionMapOutput) MapIndex(k pulumi.StringInput) DynamodbCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynamodbCollection {
		return vs[0].(map[string]*DynamodbCollection)[vs[1].(string)]
	}).(DynamodbCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynamodbCollectionInput)(nil)).Elem(), &DynamodbCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamodbCollectionArrayInput)(nil)).Elem(), DynamodbCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynamodbCollectionMapInput)(nil)).Elem(), DynamodbCollectionMap{})
	pulumi.RegisterOutputType(DynamodbCollectionOutput{})
	pulumi.RegisterOutputType(DynamodbCollectionArrayOutput{})
	pulumi.RegisterOutputType(DynamodbCollectionMapOutput{})
}
