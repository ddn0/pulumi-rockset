// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a collection with an MongoDB source attached.
type MongodbCollection struct {
	pulumi.CustomResourceState

	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrOutput `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrOutput `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources MongodbCollectionSourceArrayOutput `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrOutput `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrOutput `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewMongodbCollection registers a new resource with the given unique name, arguments, and options.
func NewMongodbCollection(ctx *pulumi.Context,
	name string, args *MongodbCollectionArgs, opts ...pulumi.ResourceOption) (*MongodbCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbCollection
	err := ctx.RegisterResource("rockset:index/mongodbCollection:MongodbCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbCollection gets an existing MongodbCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbCollectionState, opts ...pulumi.ResourceOption) (*MongodbCollection, error) {
	var resource MongodbCollection
	err := ctx.ReadResource("rockset:index/mongodbCollection:MongodbCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbCollection resources.
type mongodbCollectionState struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []MongodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type MongodbCollectionState struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources MongodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (MongodbCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbCollectionState)(nil)).Elem()
}

type mongodbCollectionArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []MongodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a MongodbCollection resource.
type MongodbCollectionArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources MongodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (MongodbCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbCollectionArgs)(nil)).Elem()
}

type MongodbCollectionInput interface {
	pulumi.Input

	ToMongodbCollectionOutput() MongodbCollectionOutput
	ToMongodbCollectionOutputWithContext(ctx context.Context) MongodbCollectionOutput
}

func (*MongodbCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbCollection)(nil)).Elem()
}

func (i *MongodbCollection) ToMongodbCollectionOutput() MongodbCollectionOutput {
	return i.ToMongodbCollectionOutputWithContext(context.Background())
}

func (i *MongodbCollection) ToMongodbCollectionOutputWithContext(ctx context.Context) MongodbCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbCollectionOutput)
}

// MongodbCollectionArrayInput is an input type that accepts MongodbCollectionArray and MongodbCollectionArrayOutput values.
// You can construct a concrete instance of `MongodbCollectionArrayInput` via:
//
//	MongodbCollectionArray{ MongodbCollectionArgs{...} }
type MongodbCollectionArrayInput interface {
	pulumi.Input

	ToMongodbCollectionArrayOutput() MongodbCollectionArrayOutput
	ToMongodbCollectionArrayOutputWithContext(context.Context) MongodbCollectionArrayOutput
}

type MongodbCollectionArray []MongodbCollectionInput

func (MongodbCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbCollection)(nil)).Elem()
}

func (i MongodbCollectionArray) ToMongodbCollectionArrayOutput() MongodbCollectionArrayOutput {
	return i.ToMongodbCollectionArrayOutputWithContext(context.Background())
}

func (i MongodbCollectionArray) ToMongodbCollectionArrayOutputWithContext(ctx context.Context) MongodbCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbCollectionArrayOutput)
}

// MongodbCollectionMapInput is an input type that accepts MongodbCollectionMap and MongodbCollectionMapOutput values.
// You can construct a concrete instance of `MongodbCollectionMapInput` via:
//
//	MongodbCollectionMap{ "key": MongodbCollectionArgs{...} }
type MongodbCollectionMapInput interface {
	pulumi.Input

	ToMongodbCollectionMapOutput() MongodbCollectionMapOutput
	ToMongodbCollectionMapOutputWithContext(context.Context) MongodbCollectionMapOutput
}

type MongodbCollectionMap map[string]MongodbCollectionInput

func (MongodbCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbCollection)(nil)).Elem()
}

func (i MongodbCollectionMap) ToMongodbCollectionMapOutput() MongodbCollectionMapOutput {
	return i.ToMongodbCollectionMapOutputWithContext(context.Background())
}

func (i MongodbCollectionMap) ToMongodbCollectionMapOutputWithContext(ctx context.Context) MongodbCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbCollectionMapOutput)
}

type MongodbCollectionOutput struct{ *pulumi.OutputState }

func (MongodbCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbCollection)(nil)).Elem()
}

func (o MongodbCollectionOutput) ToMongodbCollectionOutput() MongodbCollectionOutput {
	return o
}

func (o MongodbCollectionOutput) ToMongodbCollectionOutputWithContext(ctx context.Context) MongodbCollectionOutput {
	return o
}

// Text describing the collection.
func (o MongodbCollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Ingest transformation SQL query. Turns the collection into insertOnly mode.
func (o MongodbCollectionOutput) IngestTransformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.StringPtrOutput { return v.IngestTransformation }).(pulumi.StringPtrOutput)
}

// Unique identifier for the collection. Can contain alphanumeric or dash characters.
func (o MongodbCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of seconds after which data is purged. Based on event time.
func (o MongodbCollectionOutput) RetentionSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.IntPtrOutput { return v.RetentionSecs }).(pulumi.IntPtrOutput)
}

// Defines a source for this collection.
func (o MongodbCollectionOutput) Sources() MongodbCollectionSourceArrayOutput {
	return o.ApplyT(func(v *MongodbCollection) MongodbCollectionSourceArrayOutput { return v.Sources }).(MongodbCollectionSourceArrayOutput)
}

// Wait until the collection is ready.
func (o MongodbCollectionOutput) WaitForCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.BoolPtrOutput { return v.WaitForCollection }).(pulumi.BoolPtrOutput)
}

// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
func (o MongodbCollectionOutput) WaitForDocuments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.IntPtrOutput { return v.WaitForDocuments }).(pulumi.IntPtrOutput)
}

// The name of the workspace.
func (o MongodbCollectionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbCollection) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type MongodbCollectionArrayOutput struct{ *pulumi.OutputState }

func (MongodbCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbCollection)(nil)).Elem()
}

func (o MongodbCollectionArrayOutput) ToMongodbCollectionArrayOutput() MongodbCollectionArrayOutput {
	return o
}

func (o MongodbCollectionArrayOutput) ToMongodbCollectionArrayOutputWithContext(ctx context.Context) MongodbCollectionArrayOutput {
	return o
}

func (o MongodbCollectionArrayOutput) Index(i pulumi.IntInput) MongodbCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbCollection {
		return vs[0].([]*MongodbCollection)[vs[1].(int)]
	}).(MongodbCollectionOutput)
}

type MongodbCollectionMapOutput struct{ *pulumi.OutputState }

func (MongodbCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbCollection)(nil)).Elem()
}

func (o MongodbCollectionMapOutput) ToMongodbCollectionMapOutput() MongodbCollectionMapOutput {
	return o
}

func (o MongodbCollectionMapOutput) ToMongodbCollectionMapOutputWithContext(ctx context.Context) MongodbCollectionMapOutput {
	return o
}

func (o MongodbCollectionMapOutput) MapIndex(k pulumi.StringInput) MongodbCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbCollection {
		return vs[0].(map[string]*MongodbCollection)[vs[1].(string)]
	}).(MongodbCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbCollectionInput)(nil)).Elem(), &MongodbCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbCollectionArrayInput)(nil)).Elem(), MongodbCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbCollectionMapInput)(nil)).Elem(), MongodbCollectionMap{})
	pulumi.RegisterOutputType(MongodbCollectionOutput{})
	pulumi.RegisterOutputType(MongodbCollectionArrayOutput{})
	pulumi.RegisterOutputType(MongodbCollectionMapOutput{})
}
