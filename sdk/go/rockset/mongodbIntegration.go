// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset MongoDB Integration.
type MongodbIntegration struct {
	pulumi.CustomResourceState

	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringOutput `pulumi:"connectionUri"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMongodbIntegration registers a new resource with the given unique name, arguments, and options.
func NewMongodbIntegration(ctx *pulumi.Context,
	name string, args *MongodbIntegrationArgs, opts ...pulumi.ResourceOption) (*MongodbIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionUri == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionUri'")
	}
	if args.ConnectionUri != nil {
		args.ConnectionUri = pulumi.ToSecret(args.ConnectionUri).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionUri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbIntegration
	err := ctx.RegisterResource("rockset:index/mongodbIntegration:MongodbIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbIntegration gets an existing MongodbIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbIntegrationState, opts ...pulumi.ResourceOption) (*MongodbIntegration, error) {
	var resource MongodbIntegration
	err := ctx.ReadResource("rockset:index/mongodbIntegration:MongodbIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbIntegration resources.
type mongodbIntegrationState struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri *string `pulumi:"connectionUri"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

type MongodbIntegrationState struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (MongodbIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbIntegrationState)(nil)).Elem()
}

type mongodbIntegrationArgs struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri string `pulumi:"connectionUri"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MongodbIntegration resource.
type MongodbIntegrationArgs struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (MongodbIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbIntegrationArgs)(nil)).Elem()
}

type MongodbIntegrationInput interface {
	pulumi.Input

	ToMongodbIntegrationOutput() MongodbIntegrationOutput
	ToMongodbIntegrationOutputWithContext(ctx context.Context) MongodbIntegrationOutput
}

func (*MongodbIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbIntegration)(nil)).Elem()
}

func (i *MongodbIntegration) ToMongodbIntegrationOutput() MongodbIntegrationOutput {
	return i.ToMongodbIntegrationOutputWithContext(context.Background())
}

func (i *MongodbIntegration) ToMongodbIntegrationOutputWithContext(ctx context.Context) MongodbIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbIntegrationOutput)
}

// MongodbIntegrationArrayInput is an input type that accepts MongodbIntegrationArray and MongodbIntegrationArrayOutput values.
// You can construct a concrete instance of `MongodbIntegrationArrayInput` via:
//
//	MongodbIntegrationArray{ MongodbIntegrationArgs{...} }
type MongodbIntegrationArrayInput interface {
	pulumi.Input

	ToMongodbIntegrationArrayOutput() MongodbIntegrationArrayOutput
	ToMongodbIntegrationArrayOutputWithContext(context.Context) MongodbIntegrationArrayOutput
}

type MongodbIntegrationArray []MongodbIntegrationInput

func (MongodbIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbIntegration)(nil)).Elem()
}

func (i MongodbIntegrationArray) ToMongodbIntegrationArrayOutput() MongodbIntegrationArrayOutput {
	return i.ToMongodbIntegrationArrayOutputWithContext(context.Background())
}

func (i MongodbIntegrationArray) ToMongodbIntegrationArrayOutputWithContext(ctx context.Context) MongodbIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbIntegrationArrayOutput)
}

// MongodbIntegrationMapInput is an input type that accepts MongodbIntegrationMap and MongodbIntegrationMapOutput values.
// You can construct a concrete instance of `MongodbIntegrationMapInput` via:
//
//	MongodbIntegrationMap{ "key": MongodbIntegrationArgs{...} }
type MongodbIntegrationMapInput interface {
	pulumi.Input

	ToMongodbIntegrationMapOutput() MongodbIntegrationMapOutput
	ToMongodbIntegrationMapOutputWithContext(context.Context) MongodbIntegrationMapOutput
}

type MongodbIntegrationMap map[string]MongodbIntegrationInput

func (MongodbIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbIntegration)(nil)).Elem()
}

func (i MongodbIntegrationMap) ToMongodbIntegrationMapOutput() MongodbIntegrationMapOutput {
	return i.ToMongodbIntegrationMapOutputWithContext(context.Background())
}

func (i MongodbIntegrationMap) ToMongodbIntegrationMapOutputWithContext(ctx context.Context) MongodbIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbIntegrationMapOutput)
}

type MongodbIntegrationOutput struct{ *pulumi.OutputState }

func (MongodbIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbIntegration)(nil)).Elem()
}

func (o MongodbIntegrationOutput) ToMongodbIntegrationOutput() MongodbIntegrationOutput {
	return o
}

func (o MongodbIntegrationOutput) ToMongodbIntegrationOutputWithContext(ctx context.Context) MongodbIntegrationOutput {
	return o
}

// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
func (o MongodbIntegrationOutput) ConnectionUri() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbIntegration) pulumi.StringOutput { return v.ConnectionUri }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o MongodbIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongodbIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o MongodbIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MongodbIntegrationArrayOutput struct{ *pulumi.OutputState }

func (MongodbIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbIntegration)(nil)).Elem()
}

func (o MongodbIntegrationArrayOutput) ToMongodbIntegrationArrayOutput() MongodbIntegrationArrayOutput {
	return o
}

func (o MongodbIntegrationArrayOutput) ToMongodbIntegrationArrayOutputWithContext(ctx context.Context) MongodbIntegrationArrayOutput {
	return o
}

func (o MongodbIntegrationArrayOutput) Index(i pulumi.IntInput) MongodbIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbIntegration {
		return vs[0].([]*MongodbIntegration)[vs[1].(int)]
	}).(MongodbIntegrationOutput)
}

type MongodbIntegrationMapOutput struct{ *pulumi.OutputState }

func (MongodbIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbIntegration)(nil)).Elem()
}

func (o MongodbIntegrationMapOutput) ToMongodbIntegrationMapOutput() MongodbIntegrationMapOutput {
	return o
}

func (o MongodbIntegrationMapOutput) ToMongodbIntegrationMapOutputWithContext(ctx context.Context) MongodbIntegrationMapOutput {
	return o
}

func (o MongodbIntegrationMapOutput) MapIndex(k pulumi.StringInput) MongodbIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbIntegration {
		return vs[0].(map[string]*MongodbIntegration)[vs[1].(string)]
	}).(MongodbIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbIntegrationInput)(nil)).Elem(), &MongodbIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbIntegrationArrayInput)(nil)).Elem(), MongodbIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbIntegrationMapInput)(nil)).Elem(), MongodbIntegrationMap{})
	pulumi.RegisterOutputType(MongodbIntegrationOutput{})
	pulumi.RegisterOutputType(MongodbIntegrationArrayOutput{})
	pulumi.RegisterOutputType(MongodbIntegrationMapOutput{})
}
