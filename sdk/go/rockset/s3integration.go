// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset S3 Integration.
type S3Integration struct {
	pulumi.CustomResourceState

	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringOutput `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewS3Integration registers a new resource with the given unique name, arguments, and options.
func NewS3Integration(ctx *pulumi.Context,
	name string, args *S3IntegrationArgs, opts ...pulumi.ResourceOption) (*S3Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AwsRoleArn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Integration
	err := ctx.RegisterResource("rockset:index/s3Integration:S3Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Integration gets an existing S3Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Integration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3IntegrationState, opts ...pulumi.ResourceOption) (*S3Integration, error) {
	var resource S3Integration
	err := ctx.ReadResource("rockset:index/s3Integration:S3Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Integration resources.
type s3integrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

type S3IntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (S3IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3integrationState)(nil)).Elem()
}

type s3integrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a S3Integration resource.
type S3IntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (S3IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3integrationArgs)(nil)).Elem()
}

type S3IntegrationInput interface {
	pulumi.Input

	ToS3IntegrationOutput() S3IntegrationOutput
	ToS3IntegrationOutputWithContext(ctx context.Context) S3IntegrationOutput
}

func (*S3Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Integration)(nil)).Elem()
}

func (i *S3Integration) ToS3IntegrationOutput() S3IntegrationOutput {
	return i.ToS3IntegrationOutputWithContext(context.Background())
}

func (i *S3Integration) ToS3IntegrationOutputWithContext(ctx context.Context) S3IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3IntegrationOutput)
}

// S3IntegrationArrayInput is an input type that accepts S3IntegrationArray and S3IntegrationArrayOutput values.
// You can construct a concrete instance of `S3IntegrationArrayInput` via:
//
//	S3IntegrationArray{ S3IntegrationArgs{...} }
type S3IntegrationArrayInput interface {
	pulumi.Input

	ToS3IntegrationArrayOutput() S3IntegrationArrayOutput
	ToS3IntegrationArrayOutputWithContext(context.Context) S3IntegrationArrayOutput
}

type S3IntegrationArray []S3IntegrationInput

func (S3IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Integration)(nil)).Elem()
}

func (i S3IntegrationArray) ToS3IntegrationArrayOutput() S3IntegrationArrayOutput {
	return i.ToS3IntegrationArrayOutputWithContext(context.Background())
}

func (i S3IntegrationArray) ToS3IntegrationArrayOutputWithContext(ctx context.Context) S3IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3IntegrationArrayOutput)
}

// S3IntegrationMapInput is an input type that accepts S3IntegrationMap and S3IntegrationMapOutput values.
// You can construct a concrete instance of `S3IntegrationMapInput` via:
//
//	S3IntegrationMap{ "key": S3IntegrationArgs{...} }
type S3IntegrationMapInput interface {
	pulumi.Input

	ToS3IntegrationMapOutput() S3IntegrationMapOutput
	ToS3IntegrationMapOutputWithContext(context.Context) S3IntegrationMapOutput
}

type S3IntegrationMap map[string]S3IntegrationInput

func (S3IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Integration)(nil)).Elem()
}

func (i S3IntegrationMap) ToS3IntegrationMapOutput() S3IntegrationMapOutput {
	return i.ToS3IntegrationMapOutputWithContext(context.Background())
}

func (i S3IntegrationMap) ToS3IntegrationMapOutputWithContext(ctx context.Context) S3IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3IntegrationMapOutput)
}

type S3IntegrationOutput struct{ *pulumi.OutputState }

func (S3IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Integration)(nil)).Elem()
}

func (o S3IntegrationOutput) ToS3IntegrationOutput() S3IntegrationOutput {
	return o
}

func (o S3IntegrationOutput) ToS3IntegrationOutputWithContext(ctx context.Context) S3IntegrationOutput {
	return o
}

// The AWS Role Arn to use for this integration.
func (o S3IntegrationOutput) AwsRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Integration) pulumi.StringOutput { return v.AwsRoleArn }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o S3IntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3Integration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o S3IntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Integration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type S3IntegrationArrayOutput struct{ *pulumi.OutputState }

func (S3IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Integration)(nil)).Elem()
}

func (o S3IntegrationArrayOutput) ToS3IntegrationArrayOutput() S3IntegrationArrayOutput {
	return o
}

func (o S3IntegrationArrayOutput) ToS3IntegrationArrayOutputWithContext(ctx context.Context) S3IntegrationArrayOutput {
	return o
}

func (o S3IntegrationArrayOutput) Index(i pulumi.IntInput) S3IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Integration {
		return vs[0].([]*S3Integration)[vs[1].(int)]
	}).(S3IntegrationOutput)
}

type S3IntegrationMapOutput struct{ *pulumi.OutputState }

func (S3IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Integration)(nil)).Elem()
}

func (o S3IntegrationMapOutput) ToS3IntegrationMapOutput() S3IntegrationMapOutput {
	return o
}

func (o S3IntegrationMapOutput) ToS3IntegrationMapOutputWithContext(ctx context.Context) S3IntegrationMapOutput {
	return o
}

func (o S3IntegrationMapOutput) MapIndex(k pulumi.StringInput) S3IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Integration {
		return vs[0].(map[string]*S3Integration)[vs[1].(string)]
	}).(S3IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3IntegrationInput)(nil)).Elem(), &S3Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3IntegrationArrayInput)(nil)).Elem(), S3IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3IntegrationMapInput)(nil)).Elem(), S3IntegrationMap{})
	pulumi.RegisterOutputType(S3IntegrationOutput{})
	pulumi.RegisterOutputType(S3IntegrationArrayOutput{})
	pulumi.RegisterOutputType(S3IntegrationMapOutput{})
}
