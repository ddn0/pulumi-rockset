// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Query Lambda Tag.
type QueryLambdaTag struct {
	pulumi.CustomResourceState

	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringOutput `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewQueryLambdaTag registers a new resource with the given unique name, arguments, and options.
func NewQueryLambdaTag(ctx *pulumi.Context,
	name string, args *QueryLambdaTagArgs, opts ...pulumi.ResourceOption) (*QueryLambdaTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueryLambda == nil {
		return nil, errors.New("invalid value for required argument 'QueryLambda'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueryLambdaTag
	err := ctx.RegisterResource("rockset:index/queryLambdaTag:QueryLambdaTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueryLambdaTag gets an existing QueryLambdaTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueryLambdaTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryLambdaTagState, opts ...pulumi.ResourceOption) (*QueryLambdaTag, error) {
	var resource QueryLambdaTag
	err := ctx.ReadResource("rockset:index/queryLambdaTag:QueryLambdaTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueryLambdaTag resources.
type queryLambdaTagState struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda *string `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version *string `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace *string `pulumi:"workspace"`
}

type QueryLambdaTagState struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringPtrInput
	// Version of the query lambda this tag should point to.
	Version pulumi.StringPtrInput
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringPtrInput
}

func (QueryLambdaTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLambdaTagState)(nil)).Elem()
}

type queryLambdaTagArgs struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda string `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version string `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a QueryLambdaTag resource.
type QueryLambdaTagArgs struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringInput
	// Version of the query lambda this tag should point to.
	Version pulumi.StringInput
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringInput
}

func (QueryLambdaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryLambdaTagArgs)(nil)).Elem()
}

type QueryLambdaTagInput interface {
	pulumi.Input

	ToQueryLambdaTagOutput() QueryLambdaTagOutput
	ToQueryLambdaTagOutputWithContext(ctx context.Context) QueryLambdaTagOutput
}

func (*QueryLambdaTag) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLambdaTag)(nil)).Elem()
}

func (i *QueryLambdaTag) ToQueryLambdaTagOutput() QueryLambdaTagOutput {
	return i.ToQueryLambdaTagOutputWithContext(context.Background())
}

func (i *QueryLambdaTag) ToQueryLambdaTagOutputWithContext(ctx context.Context) QueryLambdaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaTagOutput)
}

// QueryLambdaTagArrayInput is an input type that accepts QueryLambdaTagArray and QueryLambdaTagArrayOutput values.
// You can construct a concrete instance of `QueryLambdaTagArrayInput` via:
//
//	QueryLambdaTagArray{ QueryLambdaTagArgs{...} }
type QueryLambdaTagArrayInput interface {
	pulumi.Input

	ToQueryLambdaTagArrayOutput() QueryLambdaTagArrayOutput
	ToQueryLambdaTagArrayOutputWithContext(context.Context) QueryLambdaTagArrayOutput
}

type QueryLambdaTagArray []QueryLambdaTagInput

func (QueryLambdaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLambdaTag)(nil)).Elem()
}

func (i QueryLambdaTagArray) ToQueryLambdaTagArrayOutput() QueryLambdaTagArrayOutput {
	return i.ToQueryLambdaTagArrayOutputWithContext(context.Background())
}

func (i QueryLambdaTagArray) ToQueryLambdaTagArrayOutputWithContext(ctx context.Context) QueryLambdaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaTagArrayOutput)
}

// QueryLambdaTagMapInput is an input type that accepts QueryLambdaTagMap and QueryLambdaTagMapOutput values.
// You can construct a concrete instance of `QueryLambdaTagMapInput` via:
//
//	QueryLambdaTagMap{ "key": QueryLambdaTagArgs{...} }
type QueryLambdaTagMapInput interface {
	pulumi.Input

	ToQueryLambdaTagMapOutput() QueryLambdaTagMapOutput
	ToQueryLambdaTagMapOutputWithContext(context.Context) QueryLambdaTagMapOutput
}

type QueryLambdaTagMap map[string]QueryLambdaTagInput

func (QueryLambdaTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLambdaTag)(nil)).Elem()
}

func (i QueryLambdaTagMap) ToQueryLambdaTagMapOutput() QueryLambdaTagMapOutput {
	return i.ToQueryLambdaTagMapOutputWithContext(context.Background())
}

func (i QueryLambdaTagMap) ToQueryLambdaTagMapOutputWithContext(ctx context.Context) QueryLambdaTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryLambdaTagMapOutput)
}

type QueryLambdaTagOutput struct{ *pulumi.OutputState }

func (QueryLambdaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryLambdaTag)(nil)).Elem()
}

func (o QueryLambdaTagOutput) ToQueryLambdaTagOutput() QueryLambdaTagOutput {
	return o
}

func (o QueryLambdaTagOutput) ToQueryLambdaTagOutputWithContext(ctx context.Context) QueryLambdaTagOutput {
	return o
}

// Unique identifier for the tag. Can contain alphanumeric or dash characters.
func (o QueryLambdaTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambdaTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
func (o QueryLambdaTagOutput) QueryLambda() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambdaTag) pulumi.StringOutput { return v.QueryLambda }).(pulumi.StringOutput)
}

// Version of the query lambda this tag should point to.
func (o QueryLambdaTagOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambdaTag) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The name of the workspace the query lambda is in.
func (o QueryLambdaTagOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *QueryLambdaTag) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type QueryLambdaTagArrayOutput struct{ *pulumi.OutputState }

func (QueryLambdaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueryLambdaTag)(nil)).Elem()
}

func (o QueryLambdaTagArrayOutput) ToQueryLambdaTagArrayOutput() QueryLambdaTagArrayOutput {
	return o
}

func (o QueryLambdaTagArrayOutput) ToQueryLambdaTagArrayOutputWithContext(ctx context.Context) QueryLambdaTagArrayOutput {
	return o
}

func (o QueryLambdaTagArrayOutput) Index(i pulumi.IntInput) QueryLambdaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueryLambdaTag {
		return vs[0].([]*QueryLambdaTag)[vs[1].(int)]
	}).(QueryLambdaTagOutput)
}

type QueryLambdaTagMapOutput struct{ *pulumi.OutputState }

func (QueryLambdaTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueryLambdaTag)(nil)).Elem()
}

func (o QueryLambdaTagMapOutput) ToQueryLambdaTagMapOutput() QueryLambdaTagMapOutput {
	return o
}

func (o QueryLambdaTagMapOutput) ToQueryLambdaTagMapOutputWithContext(ctx context.Context) QueryLambdaTagMapOutput {
	return o
}

func (o QueryLambdaTagMapOutput) MapIndex(k pulumi.StringInput) QueryLambdaTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueryLambdaTag {
		return vs[0].(map[string]*QueryLambdaTag)[vs[1].(string)]
	}).(QueryLambdaTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaTagInput)(nil)).Elem(), &QueryLambdaTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaTagArrayInput)(nil)).Elem(), QueryLambdaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryLambdaTagMapInput)(nil)).Elem(), QueryLambdaTagMap{})
	pulumi.RegisterOutputType(QueryLambdaTagOutput{})
	pulumi.RegisterOutputType(QueryLambdaTagArrayOutput{})
	pulumi.RegisterOutputType(QueryLambdaTagMapOutput{})
}
