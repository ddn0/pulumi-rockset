// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ddn0/pulumi-rockset/sdk/go/rockset"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sample, err := rockset.NewWorkspace(ctx, "sample", &rockset.WorkspaceArgs{
//				Description: pulumi.String("sample datasets"),
//			})
//			if err != nil {
//				return err
//			}
//			public, err := rockset.NewS3Integration(ctx, "public", &rockset.S3IntegrationArgs{
//				Description: pulumi.String("Integration to access Rockset's public datasets"),
//				AwsRoleArn:  pulumi.String("arn:aws:iam::469279130686:role/rockset-public-datasets"),
//			})
//			if err != nil {
//				return err
//			}
//			cities, err := rockset.NewS3Collection(ctx, "cities", &rockset.S3CollectionArgs{
//				Workspace: sample.Name,
//				Sources: rockset.S3CollectionSourceArray{
//					&rockset.S3CollectionSourceArgs{
//						Bucket:          pulumi.String("rockset-public-datasets"),
//						IntegrationName: public.Name,
//						Pattern:         pulumi.String("cities/*.json"),
//						Format:          pulumi.String("json"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rockset.NewView(ctx, "brazil", &rockset.ViewArgs{
//				Query:     pulumi.String("SELECT * FROM sample.cities c WHERE c.fields.country_code = 'BR'"),
//				Workspace: sample.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				cities,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type View struct {
	pulumi.CustomResourceState

	// The user who created the view.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// SQL query used for thw view.
	Query pulumi.StringOutput `pulumi:"query"`
	// Workspace name.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("rockset:index/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("rockset:index/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// The user who created the view.
	CreatedBy *string `pulumi:"createdBy"`
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// SQL query used for thw view.
	Query *string `pulumi:"query"`
	// Workspace name.
	Workspace *string `pulumi:"workspace"`
}

type ViewState struct {
	// The user who created the view.
	CreatedBy pulumi.StringPtrInput
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// SQL query used for thw view.
	Query pulumi.StringPtrInput
	// Workspace name.
	Workspace pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// SQL query used for thw view.
	Query string `pulumi:"query"`
	// Workspace name.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// SQL query used for thw view.
	Query pulumi.StringInput
	// Workspace name.
	Workspace pulumi.StringInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// The user who created the view.
func (o ViewOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Text describing the collection.
func (o ViewOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SQL query used for thw view.
func (o ViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// Workspace name.
func (o ViewOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
