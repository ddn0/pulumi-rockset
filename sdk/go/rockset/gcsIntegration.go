// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/ddn0/pulumi-rockset/sdk/go/rockset/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset GCS Integration.
type GcsIntegration struct {
	pulumi.CustomResourceState

	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GCP service account key JSON.
	ServiceAccountKey pulumi.StringOutput `pulumi:"serviceAccountKey"`
}

// NewGcsIntegration registers a new resource with the given unique name, arguments, and options.
func NewGcsIntegration(ctx *pulumi.Context,
	name string, args *GcsIntegrationArgs, opts ...pulumi.ResourceOption) (*GcsIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceAccountKey == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GcsIntegration
	err := ctx.RegisterResource("rockset:index/gcsIntegration:GcsIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcsIntegration gets an existing GcsIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcsIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcsIntegrationState, opts ...pulumi.ResourceOption) (*GcsIntegration, error) {
	var resource GcsIntegration
	err := ctx.ReadResource("rockset:index/gcsIntegration:GcsIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcsIntegration resources.
type gcsIntegrationState struct {
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// The GCP service account key JSON.
	ServiceAccountKey *string `pulumi:"serviceAccountKey"`
}

type GcsIntegrationState struct {
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// The GCP service account key JSON.
	ServiceAccountKey pulumi.StringPtrInput
}

func (GcsIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcsIntegrationState)(nil)).Elem()
}

type gcsIntegrationArgs struct {
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// The GCP service account key JSON.
	ServiceAccountKey string `pulumi:"serviceAccountKey"`
}

// The set of arguments for constructing a GcsIntegration resource.
type GcsIntegrationArgs struct {
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// The GCP service account key JSON.
	ServiceAccountKey pulumi.StringInput
}

func (GcsIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcsIntegrationArgs)(nil)).Elem()
}

type GcsIntegrationInput interface {
	pulumi.Input

	ToGcsIntegrationOutput() GcsIntegrationOutput
	ToGcsIntegrationOutputWithContext(ctx context.Context) GcsIntegrationOutput
}

func (*GcsIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsIntegration)(nil)).Elem()
}

func (i *GcsIntegration) ToGcsIntegrationOutput() GcsIntegrationOutput {
	return i.ToGcsIntegrationOutputWithContext(context.Background())
}

func (i *GcsIntegration) ToGcsIntegrationOutputWithContext(ctx context.Context) GcsIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsIntegrationOutput)
}

// GcsIntegrationArrayInput is an input type that accepts GcsIntegrationArray and GcsIntegrationArrayOutput values.
// You can construct a concrete instance of `GcsIntegrationArrayInput` via:
//
//	GcsIntegrationArray{ GcsIntegrationArgs{...} }
type GcsIntegrationArrayInput interface {
	pulumi.Input

	ToGcsIntegrationArrayOutput() GcsIntegrationArrayOutput
	ToGcsIntegrationArrayOutputWithContext(context.Context) GcsIntegrationArrayOutput
}

type GcsIntegrationArray []GcsIntegrationInput

func (GcsIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcsIntegration)(nil)).Elem()
}

func (i GcsIntegrationArray) ToGcsIntegrationArrayOutput() GcsIntegrationArrayOutput {
	return i.ToGcsIntegrationArrayOutputWithContext(context.Background())
}

func (i GcsIntegrationArray) ToGcsIntegrationArrayOutputWithContext(ctx context.Context) GcsIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsIntegrationArrayOutput)
}

// GcsIntegrationMapInput is an input type that accepts GcsIntegrationMap and GcsIntegrationMapOutput values.
// You can construct a concrete instance of `GcsIntegrationMapInput` via:
//
//	GcsIntegrationMap{ "key": GcsIntegrationArgs{...} }
type GcsIntegrationMapInput interface {
	pulumi.Input

	ToGcsIntegrationMapOutput() GcsIntegrationMapOutput
	ToGcsIntegrationMapOutputWithContext(context.Context) GcsIntegrationMapOutput
}

type GcsIntegrationMap map[string]GcsIntegrationInput

func (GcsIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcsIntegration)(nil)).Elem()
}

func (i GcsIntegrationMap) ToGcsIntegrationMapOutput() GcsIntegrationMapOutput {
	return i.ToGcsIntegrationMapOutputWithContext(context.Background())
}

func (i GcsIntegrationMap) ToGcsIntegrationMapOutputWithContext(ctx context.Context) GcsIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsIntegrationMapOutput)
}

type GcsIntegrationOutput struct{ *pulumi.OutputState }

func (GcsIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsIntegration)(nil)).Elem()
}

func (o GcsIntegrationOutput) ToGcsIntegrationOutput() GcsIntegrationOutput {
	return o
}

func (o GcsIntegrationOutput) ToGcsIntegrationOutputWithContext(ctx context.Context) GcsIntegrationOutput {
	return o
}

// Text describing the integration.
func (o GcsIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o GcsIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcsIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GCP service account key JSON.
func (o GcsIntegrationOutput) ServiceAccountKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GcsIntegration) pulumi.StringOutput { return v.ServiceAccountKey }).(pulumi.StringOutput)
}

type GcsIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GcsIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcsIntegration)(nil)).Elem()
}

func (o GcsIntegrationArrayOutput) ToGcsIntegrationArrayOutput() GcsIntegrationArrayOutput {
	return o
}

func (o GcsIntegrationArrayOutput) ToGcsIntegrationArrayOutputWithContext(ctx context.Context) GcsIntegrationArrayOutput {
	return o
}

func (o GcsIntegrationArrayOutput) Index(i pulumi.IntInput) GcsIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcsIntegration {
		return vs[0].([]*GcsIntegration)[vs[1].(int)]
	}).(GcsIntegrationOutput)
}

type GcsIntegrationMapOutput struct{ *pulumi.OutputState }

func (GcsIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcsIntegration)(nil)).Elem()
}

func (o GcsIntegrationMapOutput) ToGcsIntegrationMapOutput() GcsIntegrationMapOutput {
	return o
}

func (o GcsIntegrationMapOutput) ToGcsIntegrationMapOutputWithContext(ctx context.Context) GcsIntegrationMapOutput {
	return o
}

func (o GcsIntegrationMapOutput) MapIndex(k pulumi.StringInput) GcsIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcsIntegration {
		return vs[0].(map[string]*GcsIntegration)[vs[1].(string)]
	}).(GcsIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcsIntegrationInput)(nil)).Elem(), &GcsIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsIntegrationArrayInput)(nil)).Elem(), GcsIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsIntegrationMapInput)(nil)).Elem(), GcsIntegrationMap{})
	pulumi.RegisterOutputType(GcsIntegrationOutput{})
	pulumi.RegisterOutputType(GcsIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GcsIntegrationMapOutput{})
}
