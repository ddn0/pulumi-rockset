// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rockset.Outputs
{

    [OutputType]
    public sealed class MongodbCollectionSource
    {
        /// <summary>
        /// MongoDB collection name of the target collection.
        /// </summary>
        public readonly string CollectionName;
        /// <summary>
        /// MongoDB database name containing the target collection.
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// The name of the Rockset MongoDB integration.
        /// </summary>
        public readonly string IntegrationName;
        public readonly bool? RetrieveFullDocument;
        /// <summary>
        /// MongoDB scan end time.
        /// </summary>
        public readonly string? ScanEndTime;
        /// <summary>
        /// Number of records inserted using scan.
        /// </summary>
        public readonly int? ScanRecordsProcessed;
        /// <summary>
        /// MongoDB scan start time.
        /// </summary>
        public readonly string? ScanStartTime;
        /// <summary>
        /// Number of records in MongoDB table at time of scan.
        /// </summary>
        public readonly int? ScanTotalRecords;
        /// <summary>
        /// State of current ingest for this table.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// ISO-8601 date when delete from source was last processed.
        /// </summary>
        public readonly string? StreamLastDeleteProcessedAt;
        /// <summary>
        /// ISO-8601 date when new insert from source was last processed.
        /// </summary>
        public readonly string? StreamLastInsertProcessedAt;
        /// <summary>
        /// ISO-8601 date when update from source was last processed.
        /// </summary>
        public readonly string? StreamLastUpdateProcessedAt;
        /// <summary>
        /// Number of new records deleted using stream.
        /// </summary>
        public readonly int? StreamRecordsDeleted;
        /// <summary>
        /// Number of new records inserted using stream.
        /// </summary>
        public readonly int? StreamRecordsInserted;
        /// <summary>
        /// Number of new records updated using stream.
        /// </summary>
        public readonly int? StreamRecordsUpdated;

        [OutputConstructor]
        private MongodbCollectionSource(
            string collectionName,

            string databaseName,

            string integrationName,

            bool? retrieveFullDocument,

            string? scanEndTime,

            int? scanRecordsProcessed,

            string? scanStartTime,

            int? scanTotalRecords,

            string? state,

            string? streamLastDeleteProcessedAt,

            string? streamLastInsertProcessedAt,

            string? streamLastUpdateProcessedAt,

            int? streamRecordsDeleted,

            int? streamRecordsInserted,

            int? streamRecordsUpdated)
        {
            CollectionName = collectionName;
            DatabaseName = databaseName;
            IntegrationName = integrationName;
            RetrieveFullDocument = retrieveFullDocument;
            ScanEndTime = scanEndTime;
            ScanRecordsProcessed = scanRecordsProcessed;
            ScanStartTime = scanStartTime;
            ScanTotalRecords = scanTotalRecords;
            State = state;
            StreamLastDeleteProcessedAt = streamLastDeleteProcessedAt;
            StreamLastInsertProcessedAt = streamLastInsertProcessedAt;
            StreamLastUpdateProcessedAt = streamLastUpdateProcessedAt;
            StreamRecordsDeleted = streamRecordsDeleted;
            StreamRecordsInserted = streamRecordsInserted;
            StreamRecordsUpdated = streamRecordsUpdated;
        }
    }
}
