// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rockset
{
    public static class GetVirtualInstance
    {
        public static Task<GetVirtualInstanceResult> InvokeAsync(GetVirtualInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualInstanceResult>("rockset:index/getVirtualInstance:getVirtualInstance", args ?? new GetVirtualInstanceArgs(), options.WithDefaults());

        public static Output<GetVirtualInstanceResult> Invoke(GetVirtualInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualInstanceResult>("rockset:index/getVirtualInstance:getVirtualInstance", args ?? new GetVirtualInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of seconds without queries after which the Virtual Instance is suspended.
        /// </summary>
        [Input("autoSuspendSeconds")]
        public int? AutoSuspendSeconds { get; set; }

        /// <summary>
        /// Virtual Instance current size.
        /// </summary>
        [Input("currentSize")]
        public string? CurrentSize { get; set; }

        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        [Input("default")]
        public bool? Default { get; set; }

        /// <summary>
        /// Virtual Instance description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Virtual Instance desired size.
        /// </summary>
        [Input("desiredSize")]
        public string? DesiredSize { get; set; }

        /// <summary>
        /// When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
        /// </summary>
        [Input("enableRemountOnResume")]
        public bool? EnableRemountOnResume { get; set; }

        /// <summary>
        /// Virtual Instance id.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Number of seconds between data refreshes for mounts on this Virtual Instance.
        /// </summary>
        [Input("mountRefreshIntervalSeconds")]
        public int? MountRefreshIntervalSeconds { get; set; }

        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Virtual Instance state.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetVirtualInstanceArgs()
        {
        }
        public static new GetVirtualInstanceArgs Empty => new GetVirtualInstanceArgs();
    }

    public sealed class GetVirtualInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of seconds without queries after which the Virtual Instance is suspended.
        /// </summary>
        [Input("autoSuspendSeconds")]
        public Input<int>? AutoSuspendSeconds { get; set; }

        /// <summary>
        /// Virtual Instance current size.
        /// </summary>
        [Input("currentSize")]
        public Input<string>? CurrentSize { get; set; }

        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// Virtual Instance description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Virtual Instance desired size.
        /// </summary>
        [Input("desiredSize")]
        public Input<string>? DesiredSize { get; set; }

        /// <summary>
        /// When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
        /// </summary>
        [Input("enableRemountOnResume")]
        public Input<bool>? EnableRemountOnResume { get; set; }

        /// <summary>
        /// Virtual Instance id.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Number of seconds between data refreshes for mounts on this Virtual Instance.
        /// </summary>
        [Input("mountRefreshIntervalSeconds")]
        public Input<int>? MountRefreshIntervalSeconds { get; set; }

        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Virtual Instance state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public GetVirtualInstanceInvokeArgs()
        {
        }
        public static new GetVirtualInstanceInvokeArgs Empty => new GetVirtualInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualInstanceResult
    {
        /// <summary>
        /// Number of seconds without queries after which the Virtual Instance is suspended.
        /// </summary>
        public readonly int? AutoSuspendSeconds;
        /// <summary>
        /// Virtual Instance current size.
        /// </summary>
        public readonly string? CurrentSize;
        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        public readonly bool? Default;
        /// <summary>
        /// Virtual Instance description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Virtual Instance desired size.
        /// </summary>
        public readonly string? DesiredSize;
        /// <summary>
        /// When a Virtual Instance is resumed, it will remount all collections that were mounted when the Virtual Instance was suspended.
        /// </summary>
        public readonly bool? EnableRemountOnResume;
        /// <summary>
        /// Virtual Instance id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of seconds between data refreshes for mounts on this Virtual Instance.
        /// </summary>
        public readonly int? MountRefreshIntervalSeconds;
        /// <summary>
        /// Virtual Instance name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Virtual Instance state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetVirtualInstanceResult(
            int? autoSuspendSeconds,

            string? currentSize,

            bool? @default,

            string? description,

            string? desiredSize,

            bool? enableRemountOnResume,

            string id,

            int? mountRefreshIntervalSeconds,

            string? name,

            string? state)
        {
            AutoSuspendSeconds = autoSuspendSeconds;
            CurrentSize = currentSize;
            Default = @default;
            Description = description;
            DesiredSize = desiredSize;
            EnableRemountOnResume = enableRemountOnResume;
            Id = id;
            MountRefreshIntervalSeconds = mountRefreshIntervalSeconds;
            Name = name;
            State = state;
        }
    }
}
