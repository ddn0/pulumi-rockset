// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rockset
{
    /// <summary>
    /// Manages a collection mount.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rockset = Pulumi.Rockset;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var data = new Rockset.CollectionMount("data", new()
    ///     {
    ///         VirtualInstanceId = rockset_virtual_instance.Secondary.Id,
    ///         Path = "commons.data",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import rockset:index/collectionMount:CollectionMount demo 29e4a43c-fff4-4fe6-80e3-1ee57bc22e82
    /// ```
    /// </summary>
    [RocksetResourceType("rockset:index/collectionMount:CollectionMount")]
    public partial class CollectionMount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ISO 8601 date when the mount was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// UNIX timestamp in milliseconds for most recent refresh. Not applicable for live mounts.
        /// </summary>
        [Output("lastRefreshTime")]
        public Output<int> LastRefreshTime { get; private set; } = null!;

        /// <summary>
        /// Collection path to be mounted, in the form workspace.collection
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// RRN of this mount.
        /// </summary>
        [Output("rrn")]
        public Output<string> Rrn { get; private set; } = null!;

        /// <summary>
        /// Mount state.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Virtual Instance id
        /// </summary>
        [Output("virtualInstanceId")]
        public Output<string> VirtualInstanceId { get; private set; } = null!;

        /// <summary>
        /// Virtual Instance RRN
        /// </summary>
        [Output("virtualInstanceRrn")]
        public Output<string> VirtualInstanceRrn { get; private set; } = null!;


        /// <summary>
        /// Create a CollectionMount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CollectionMount(string name, CollectionMountArgs args, CustomResourceOptions? options = null)
            : base("rockset:index/collectionMount:CollectionMount", name, args ?? new CollectionMountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CollectionMount(string name, Input<string> id, CollectionMountState? state = null, CustomResourceOptions? options = null)
            : base("rockset:index/collectionMount:CollectionMount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CollectionMount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CollectionMount Get(string name, Input<string> id, CollectionMountState? state = null, CustomResourceOptions? options = null)
        {
            return new CollectionMount(name, id, state, options);
        }
    }

    public sealed class CollectionMountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Collection path to be mounted, in the form workspace.collection
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Virtual Instance id
        /// </summary>
        [Input("virtualInstanceId", required: true)]
        public Input<string> VirtualInstanceId { get; set; } = null!;

        public CollectionMountArgs()
        {
        }
        public static new CollectionMountArgs Empty => new CollectionMountArgs();
    }

    public sealed class CollectionMountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ISO 8601 date when the mount was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// UNIX timestamp in milliseconds for most recent refresh. Not applicable for live mounts.
        /// </summary>
        [Input("lastRefreshTime")]
        public Input<int>? LastRefreshTime { get; set; }

        /// <summary>
        /// Collection path to be mounted, in the form workspace.collection
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// RRN of this mount.
        /// </summary>
        [Input("rrn")]
        public Input<string>? Rrn { get; set; }

        /// <summary>
        /// Mount state.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Virtual Instance id
        /// </summary>
        [Input("virtualInstanceId")]
        public Input<string>? VirtualInstanceId { get; set; }

        /// <summary>
        /// Virtual Instance RRN
        /// </summary>
        [Input("virtualInstanceRrn")]
        public Input<string>? VirtualInstanceRrn { get; set; }

        public CollectionMountState()
        {
        }
        public static new CollectionMountState Empty => new CollectionMountState();
    }
}
